"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@wagmi";
exports.ids = ["vendor-chunks/@wagmi"];
exports.modules = {

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/chunk-JTELPB65.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/chunk-JTELPB65.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InjectedConnector: () => (/* binding */ InjectedConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-UGBGYVBH.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\");\n/* harmony import */ var _chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-OQILYQDO.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js\");\n/* harmony import */ var _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-W65LBPLT.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/custom.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n\n\n// src/injected.ts\n\n// src/utils/getInjectedName.ts\nfunction getInjectedName(ethereum) {\n    if (!ethereum) return \"Injected\";\n    const getName = (provider)=>{\n        if (provider.isApexWallet) return \"Apex Wallet\";\n        if (provider.isAvalanche) return \"Core Wallet\";\n        if (provider.isBackpack) return \"Backpack\";\n        if (provider.isBifrost) return \"Bifrost Wallet\";\n        if (provider.isBitKeep) return \"BitKeep\";\n        if (provider.isBitski) return \"Bitski\";\n        if (provider.isBlockWallet) return \"BlockWallet\";\n        if (provider.isBraveWallet) return \"Brave Wallet\";\n        if (provider.isCoin98) return \"Coin98 Wallet\";\n        if (provider.isCoinbaseWallet) return \"Coinbase Wallet\";\n        if (provider.isDawn) return \"Dawn Wallet\";\n        if (provider.isDefiant) return \"Defiant\";\n        if (provider.isDesig) return \"Desig Wallet\";\n        if (provider.isEnkrypt) return \"Enkrypt\";\n        if (provider.isExodus) return \"Exodus\";\n        if (provider.isFordefi) return \"Fordefi\";\n        if (provider.isFrame) return \"Frame\";\n        if (provider.isFrontier) return \"Frontier Wallet\";\n        if (provider.isGamestop) return \"GameStop Wallet\";\n        if (provider.isHaqqWallet) return \"HAQQ Wallet\";\n        if (provider.isHyperPay) return \"HyperPay Wallet\";\n        if (provider.isImToken) return \"ImToken\";\n        if (provider.isHaloWallet) return \"Halo Wallet\";\n        if (provider.isKuCoinWallet) return \"KuCoin Wallet\";\n        if (provider.isMathWallet) return \"MathWallet\";\n        if (provider.isNovaWallet) return \"Nova Wallet\";\n        if (provider.isOkxWallet || provider.isOKExWallet) return \"OKX Wallet\";\n        if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) return \"1inch Wallet\";\n        if (provider.isOpera) return \"Opera\";\n        if (provider.isPhantom) return \"Phantom\";\n        if (provider.isPortal) return \"Ripio Portal\";\n        if (provider.isRabby) return \"Rabby Wallet\";\n        if (provider.isRainbow) return \"Rainbow\";\n        if (provider.isSafePal) return \"SafePal Wallet\";\n        if (provider.isStatus) return \"Status\";\n        if (provider.isSubWallet) return \"SubWallet\";\n        if (provider.isTalisman) return \"Talisman\";\n        if (provider.isTally) return \"Taho\";\n        if (provider.isTokenPocket) return \"TokenPocket\";\n        if (provider.isTokenary) return \"Tokenary\";\n        if (provider.isTrust || provider.isTrustWallet) return \"Trust Wallet\";\n        if (provider.isTTWallet) return \"TTWallet\";\n        if (provider.isXDEFI) return \"XDEFI Wallet\";\n        if (provider.isZeal) return \"Zeal\";\n        if (provider.isZerion) return \"Zerion\";\n        if (provider.isMetaMask) return \"MetaMask\";\n    };\n    if (ethereum.providers?.length) {\n        const nameSet = /* @__PURE__ */ new Set();\n        let unknownCount = 1;\n        for (const provider of ethereum.providers){\n            let name = getName(provider);\n            if (!name) {\n                name = `Unknown Wallet #${unknownCount}`;\n                unknownCount += 1;\n            }\n            nameSet.add(name);\n        }\n        const names = [\n            ...nameSet\n        ];\n        if (names.length) return names;\n        return names[0] ?? \"Injected\";\n    }\n    return getName(ethereum) ?? \"Injected\";\n}\n// src/injected.ts\nvar _provider;\nvar InjectedConnector = class extends _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.Connector {\n    constructor({ chains, options: options_ } = {}){\n        const options = {\n            shimDisconnect: true,\n            getProvider () {\n                if (true) return;\n                const ethereum = window.ethereum;\n                if (ethereum?.providers && ethereum.providers.length > 0) return ethereum.providers[0];\n                return ethereum;\n            },\n            ...options_\n        };\n        super({\n            chains,\n            options\n        });\n        this.id = \"injected\";\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _provider, void 0);\n        this.shimDisconnectKey = `${this.id}.shimDisconnect`;\n        this.onAccountsChanged = (accounts)=>{\n            if (accounts.length === 0) this.emit(\"disconnect\");\n            else this.emit(\"change\", {\n                account: (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0])\n            });\n        };\n        this.onChainChanged = (chainId)=>{\n            const id = (0,_chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId)(chainId);\n            const unsupported = this.isChainUnsupported(id);\n            this.emit(\"change\", {\n                chain: {\n                    id,\n                    unsupported\n                }\n            });\n        };\n        this.onDisconnect = async (error)=>{\n            if (error.code === 1013) {\n                const provider = await this.getProvider();\n                if (provider) {\n                    const isAuthorized = await this.getAccount();\n                    if (isAuthorized) return;\n                }\n            }\n            this.emit(\"disconnect\");\n            if (this.options.shimDisconnect) this.storage?.removeItem(this.shimDisconnectKey);\n        };\n        const provider = options.getProvider();\n        if (typeof options.name === \"string\") this.name = options.name;\n        else if (provider) {\n            const detectedName = getInjectedName(provider);\n            if (options.name) this.name = options.name(detectedName);\n            else {\n                if (typeof detectedName === \"string\") this.name = detectedName;\n                else this.name = detectedName[0];\n            }\n        } else this.name = \"Injected\";\n        this.ready = !!provider;\n    }\n    async connect({ chainId } = {}) {\n        try {\n            const provider = await this.getProvider();\n            if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n            if (provider.on) {\n                provider.on(\"accountsChanged\", this.onAccountsChanged);\n                provider.on(\"chainChanged\", this.onChainChanged);\n                provider.on(\"disconnect\", this.onDisconnect);\n            }\n            this.emit(\"message\", {\n                type: \"connecting\"\n            });\n            const accounts = await provider.request({\n                method: \"eth_requestAccounts\"\n            });\n            const account = (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n            let id = await this.getChainId();\n            let unsupported = this.isChainUnsupported(id);\n            if (chainId && id !== chainId) {\n                const chain = await this.switchChain(chainId);\n                id = chain.id;\n                unsupported = this.isChainUnsupported(id);\n            }\n            if (this.options.shimDisconnect) this.storage?.setItem(this.shimDisconnectKey, true);\n            return {\n                account,\n                chain: {\n                    id,\n                    unsupported\n                }\n            };\n        } catch (error) {\n            if (this.isUserRejectedRequestError(error)) throw new viem__WEBPACK_IMPORTED_MODULE_4__.UserRejectedRequestError(error);\n            if (error.code === -32002) throw new viem__WEBPACK_IMPORTED_MODULE_4__.ResourceUnavailableRpcError(error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        const provider = await this.getProvider();\n        if (!provider?.removeListener) return;\n        provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n        provider.removeListener(\"chainChanged\", this.onChainChanged);\n        provider.removeListener(\"disconnect\", this.onDisconnect);\n        if (this.options.shimDisconnect) this.storage?.removeItem(this.shimDisconnectKey);\n    }\n    async getAccount() {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n        const accounts = await provider.request({\n            method: \"eth_accounts\"\n        });\n        return (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n    }\n    async getChainId() {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n        return provider.request({\n            method: \"eth_chainId\"\n        }).then(_chunk_OQILYQDO_js__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId);\n    }\n    async getProvider() {\n        const provider = this.options.getProvider();\n        if (provider) (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _provider, provider);\n        return (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider);\n    }\n    async getWalletClient({ chainId } = {}) {\n        const [provider, account] = await Promise.all([\n            this.getProvider(),\n            this.getAccount()\n        ]);\n        const chain = this.chains.find((x)=>x.id === chainId);\n        if (!provider) throw new Error(\"provider is required.\");\n        return (0,viem__WEBPACK_IMPORTED_MODULE_5__.createWalletClient)({\n            account,\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_6__.custom)(provider)\n        });\n    }\n    async isAuthorized() {\n        try {\n            if (this.options.shimDisconnect && !this.storage?.getItem(this.shimDisconnectKey)) return false;\n            const provider = await this.getProvider();\n            if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n            const account = await this.getAccount();\n            return !!account;\n        } catch  {\n            return false;\n        }\n    }\n    async switchChain(chainId) {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n        const id = (0,viem__WEBPACK_IMPORTED_MODULE_7__.numberToHex)(chainId);\n        try {\n            await Promise.all([\n                provider.request({\n                    method: \"wallet_switchEthereumChain\",\n                    params: [\n                        {\n                            chainId: id\n                        }\n                    ]\n                }),\n                new Promise((res)=>this.on(\"change\", ({ chain })=>{\n                        if (chain?.id === chainId) res();\n                    }))\n            ]);\n            return this.chains.find((x)=>x.id === chainId) ?? {\n                id: chainId,\n                name: `Chain ${id}`,\n                network: `${id}`,\n                nativeCurrency: {\n                    name: \"Ether\",\n                    decimals: 18,\n                    symbol: \"ETH\"\n                },\n                rpcUrls: {\n                    default: {\n                        http: [\n                            \"\"\n                        ]\n                    },\n                    public: {\n                        http: [\n                            \"\"\n                        ]\n                    }\n                }\n            };\n        } catch (error) {\n            const chain = this.chains.find((x)=>x.id === chainId);\n            if (!chain) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ChainNotConfiguredForConnectorError({\n                chainId,\n                connectorId: this.id\n            });\n            if (error.code === 4902 || error?.data?.originalError?.code === 4902) {\n                try {\n                    await provider.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            {\n                                chainId: id,\n                                chainName: chain.name,\n                                nativeCurrency: chain.nativeCurrency,\n                                rpcUrls: [\n                                    chain.rpcUrls.public?.http[0] ?? \"\"\n                                ],\n                                blockExplorerUrls: this.getBlockExplorerUrls(chain)\n                            }\n                        ]\n                    });\n                    const currentChainId = await this.getChainId();\n                    if (currentChainId !== chainId) throw new viem__WEBPACK_IMPORTED_MODULE_4__.UserRejectedRequestError(new Error(\"User rejected switch after adding network.\"));\n                    return chain;\n                } catch (error2) {\n                    throw new viem__WEBPACK_IMPORTED_MODULE_4__.UserRejectedRequestError(error2);\n                }\n            }\n            if (this.isUserRejectedRequestError(error)) throw new viem__WEBPACK_IMPORTED_MODULE_4__.UserRejectedRequestError(error);\n            throw new viem__WEBPACK_IMPORTED_MODULE_4__.SwitchChainError(error);\n        }\n    }\n    async watchAsset({ address, decimals = 18, image, symbol }) {\n        const provider = await this.getProvider();\n        if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_3__.ConnectorNotFoundError();\n        return provider.request({\n            method: \"wallet_watchAsset\",\n            params: {\n                type: \"ERC20\",\n                options: {\n                    address,\n                    decimals,\n                    image,\n                    symbol\n                }\n            }\n        });\n    }\n    isUserRejectedRequestError(error) {\n        return error.code === 4001;\n    }\n};\n_provider = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/chunk-JTELPB65.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   normalizeChainId: () => (/* binding */ normalizeChainId)\n/* harmony export */ });\n// src/utils/normalizeChainId.ts\nfunction normalizeChainId(chainId) {\n    if (typeof chainId === \"string\") return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n    if (typeof chainId === \"bigint\") return Number(chainId);\n    return chainId;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jaHVuay1PUUlMWVFETy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsZ0NBQWdDO0FBQ2hDLFNBQVNBLGlCQUFpQkMsT0FBTztJQUMvQixJQUFJLE9BQU9BLFlBQVksVUFDckIsT0FBT0MsT0FBT0MsUUFBUSxDQUNwQkYsU0FDQUEsUUFBUUcsSUFBSSxHQUFHQyxTQUFTLENBQUMsR0FBRyxPQUFPLE9BQU8sS0FBSztJQUVuRCxJQUFJLE9BQU9KLFlBQVksVUFDckIsT0FBT0MsT0FBT0Q7SUFDaEIsT0FBT0E7QUFDVDtBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29yZS1mcm9udC8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29ubmVjdG9ycy9kaXN0L2NodW5rLU9RSUxZUURPLmpzP2MyN2QiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3V0aWxzL25vcm1hbGl6ZUNoYWluSWQudHNcbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoYWluSWQoY2hhaW5JZCkge1xuICBpZiAodHlwZW9mIGNoYWluSWQgPT09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIE51bWJlci5wYXJzZUludChcbiAgICAgIGNoYWluSWQsXG4gICAgICBjaGFpbklkLnRyaW0oKS5zdWJzdHJpbmcoMCwgMikgPT09IFwiMHhcIiA/IDE2IDogMTBcbiAgICApO1xuICBpZiAodHlwZW9mIGNoYWluSWQgPT09IFwiYmlnaW50XCIpXG4gICAgcmV0dXJuIE51bWJlcihjaGFpbklkKTtcbiAgcmV0dXJuIGNoYWluSWQ7XG59XG5cbmV4cG9ydCB7XG4gIG5vcm1hbGl6ZUNoYWluSWRcbn07XG4iXSwibmFtZXMiOlsibm9ybWFsaXplQ2hhaW5JZCIsImNoYWluSWQiLCJOdW1iZXIiLCJwYXJzZUludCIsInRyaW0iLCJzdWJzdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/chunk-OQILYQDO.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainNotConfiguredForConnectorError: () => (/* binding */ ChainNotConfiguredForConnectorError),\n/* harmony export */   ConnectorNotFoundError: () => (/* binding */ ConnectorNotFoundError)\n/* harmony export */ });\n// src/errors.ts\nvar ChainNotConfiguredForConnectorError = class extends Error {\n    constructor({ chainId, connectorId }){\n        super(`Chain \"${chainId}\" not configured for connector \"${connectorId}\".`);\n        this.name = \"ChainNotConfiguredForConnectorError\";\n    }\n};\nvar ConnectorNotFoundError = class extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"ConnectorNotFoundError\";\n        this.message = \"Connector not found\";\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jaHVuay1VR0JHWVZCSC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdCQUFnQjtBQUNoQixJQUFJQSxzQ0FBc0MsY0FBY0M7SUFDdERDLFlBQVksRUFDVkMsT0FBTyxFQUNQQyxXQUFXLEVBQ1osQ0FBRTtRQUNELEtBQUssQ0FBQyxDQUFDLE9BQU8sRUFBRUQsUUFBUSxnQ0FBZ0MsRUFBRUMsWUFBWSxFQUFFLENBQUM7UUFDekUsSUFBSSxDQUFDQyxJQUFJLEdBQUc7SUFDZDtBQUNGO0FBQ0EsSUFBSUMseUJBQXlCLGNBQWNMO0lBQ3pDQyxhQUFjO1FBQ1osS0FBSyxJQUFJSztRQUNULElBQUksQ0FBQ0YsSUFBSSxHQUFHO1FBQ1osSUFBSSxDQUFDRyxPQUFPLEdBQUc7SUFDakI7QUFDRjtBQUtFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29yZS1mcm9udC8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29ubmVjdG9ycy9kaXN0L2NodW5rLVVHQkdZVkJILmpzPzFhNjciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2Vycm9ycy50c1xudmFyIENoYWluTm90Q29uZmlndXJlZEZvckNvbm5lY3RvckVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHtcbiAgICBjaGFpbklkLFxuICAgIGNvbm5lY3RvcklkXG4gIH0pIHtcbiAgICBzdXBlcihgQ2hhaW4gXCIke2NoYWluSWR9XCIgbm90IGNvbmZpZ3VyZWQgZm9yIGNvbm5lY3RvciBcIiR7Y29ubmVjdG9ySWR9XCIuYCk7XG4gICAgdGhpcy5uYW1lID0gXCJDaGFpbk5vdENvbmZpZ3VyZWRGb3JDb25uZWN0b3JFcnJvclwiO1xuICB9XG59O1xudmFyIENvbm5lY3Rvck5vdEZvdW5kRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLm5hbWUgPSBcIkNvbm5lY3Rvck5vdEZvdW5kRXJyb3JcIjtcbiAgICB0aGlzLm1lc3NhZ2UgPSBcIkNvbm5lY3RvciBub3QgZm91bmRcIjtcbiAgfVxufTtcblxuZXhwb3J0IHtcbiAgQ2hhaW5Ob3RDb25maWd1cmVkRm9yQ29ubmVjdG9yRXJyb3IsXG4gIENvbm5lY3Rvck5vdEZvdW5kRXJyb3Jcbn07XG4iXSwibmFtZXMiOlsiQ2hhaW5Ob3RDb25maWd1cmVkRm9yQ29ubmVjdG9yRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwiY2hhaW5JZCIsImNvbm5lY3RvcklkIiwibmFtZSIsIkNvbm5lY3Rvck5vdEZvdW5kRXJyb3IiLCJhcmd1bWVudHMiLCJtZXNzYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Connector: () => (/* binding */ Connector),\n/* harmony export */   __privateAdd: () => (/* binding */ __privateAdd),\n/* harmony export */   __privateGet: () => (/* binding */ __privateGet),\n/* harmony export */   __privateMethod: () => (/* binding */ __privateMethod),\n/* harmony export */   __privateSet: () => (/* binding */ __privateSet)\n/* harmony export */ });\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/eventemitter3/index.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/mainnet.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem/chains */ \"(ssr)/./node_modules/viem/_esm/chains/definitions/goerli.js\");\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar __privateMethod = (obj, member, method)=>{\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n};\n// src/base.ts\n\n\nvar Connector = class extends eventemitter3__WEBPACK_IMPORTED_MODULE_0__ {\n    constructor({ chains = [\n        viem_chains__WEBPACK_IMPORTED_MODULE_1__.mainnet,\n        viem_chains__WEBPACK_IMPORTED_MODULE_2__.goerli\n    ], options }){\n        super();\n        this.chains = chains;\n        this.options = options;\n    }\n    getBlockExplorerUrls(chain) {\n        const { default: blockExplorer, ...blockExplorers } = chain.blockExplorers ?? {};\n        if (blockExplorer) return [\n            blockExplorer.url,\n            ...Object.values(blockExplorers).map((x)=>x.url)\n        ];\n    }\n    isChainUnsupported(chainId) {\n        return !this.chains.some((x)=>x.id === chainId);\n    }\n    setStorage(storage) {\n        this.storage = storage;\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jaHVuay1XNjVMQlBMVC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUlBLGdCQUFnQixDQUFDQyxLQUFLQyxRQUFRQztJQUNoQyxJQUFJLENBQUNELE9BQU9FLEdBQUcsQ0FBQ0gsTUFDZCxNQUFNSSxVQUFVLFlBQVlGO0FBQ2hDO0FBQ0EsSUFBSUcsZUFBZSxDQUFDTCxLQUFLQyxRQUFRSztJQUMvQlAsY0FBY0MsS0FBS0MsUUFBUTtJQUMzQixPQUFPSyxTQUFTQSxPQUFPQyxJQUFJLENBQUNQLE9BQU9DLE9BQU9PLEdBQUcsQ0FBQ1I7QUFDaEQ7QUFDQSxJQUFJUyxlQUFlLENBQUNULEtBQUtDLFFBQVFTO0lBQy9CLElBQUlULE9BQU9FLEdBQUcsQ0FBQ0gsTUFDYixNQUFNSSxVQUFVO0lBQ2xCSCxrQkFBa0JVLFVBQVVWLE9BQU9XLEdBQUcsQ0FBQ1osT0FBT0MsT0FBT1ksR0FBRyxDQUFDYixLQUFLVTtBQUNoRTtBQUNBLElBQUlJLGVBQWUsQ0FBQ2QsS0FBS0MsUUFBUVMsT0FBT0s7SUFDdENoQixjQUFjQyxLQUFLQyxRQUFRO0lBQzNCYyxTQUFTQSxPQUFPUixJQUFJLENBQUNQLEtBQUtVLFNBQVNULE9BQU9ZLEdBQUcsQ0FBQ2IsS0FBS1U7SUFDbkQsT0FBT0E7QUFDVDtBQUNBLElBQUlNLGtCQUFrQixDQUFDaEIsS0FBS0MsUUFBUWdCO0lBQ2xDbEIsY0FBY0MsS0FBS0MsUUFBUTtJQUMzQixPQUFPZ0I7QUFDVDtBQUVBLGNBQWM7QUFDMEM7QUFDVjtBQUM5QyxJQUFJSyxZQUFZLGNBQWNILDBDQUFZQTtJQUN4Q0ksWUFBWSxFQUNWQyxTQUFTO1FBQUNILGdEQUFPQTtRQUFFRCwrQ0FBTUE7S0FBQyxFQUMxQkssT0FBTyxFQUNSLENBQUU7UUFDRCxLQUFLO1FBQ0wsSUFBSSxDQUFDRCxNQUFNLEdBQUdBO1FBQ2QsSUFBSSxDQUFDQyxPQUFPLEdBQUdBO0lBQ2pCO0lBQ0FDLHFCQUFxQkMsS0FBSyxFQUFFO1FBQzFCLE1BQU0sRUFBRVQsU0FBU1UsYUFBYSxFQUFFLEdBQUdDLGdCQUFnQixHQUFHRixNQUFNRSxjQUFjLElBQUksQ0FBQztRQUMvRSxJQUFJRCxlQUNGLE9BQU87WUFDTEEsY0FBY0UsR0FBRztlQUNkQyxPQUFPQyxNQUFNLENBQUNILGdCQUFnQkksR0FBRyxDQUFDLENBQUNDLElBQU1BLEVBQUVKLEdBQUc7U0FDbEQ7SUFDTDtJQUNBSyxtQkFBbUJDLE9BQU8sRUFBRTtRQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDWixNQUFNLENBQUNhLElBQUksQ0FBQyxDQUFDSCxJQUFNQSxFQUFFSSxFQUFFLEtBQUtGO0lBQzNDO0lBQ0FHLFdBQVdDLE9BQU8sRUFBRTtRQUNsQixJQUFJLENBQUNBLE9BQU8sR0FBR0E7SUFDakI7QUFDRjtBQVFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29yZS1mcm9udC8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29ubmVjdG9ycy9kaXN0L2NodW5rLVc2NUxCUExULmpzP2FiY2UiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYWNjZXNzQ2hlY2sgPSAob2JqLCBtZW1iZXIsIG1zZykgPT4ge1xuICBpZiAoIW1lbWJlci5oYXMob2JqKSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW5ub3QgXCIgKyBtc2cpO1xufTtcbnZhciBfX3ByaXZhdGVHZXQgPSAob2JqLCBtZW1iZXIsIGdldHRlcikgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcInJlYWQgZnJvbSBwcml2YXRlIGZpZWxkXCIpO1xuICByZXR1cm4gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IG1lbWJlci5nZXQob2JqKTtcbn07XG52YXIgX19wcml2YXRlQWRkID0gKG9iaiwgbWVtYmVyLCB2YWx1ZSkgPT4ge1xuICBpZiAobWVtYmVyLmhhcyhvYmopKVxuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbm5vdCBhZGQgdGhlIHNhbWUgcHJpdmF0ZSBtZW1iZXIgbW9yZSB0aGFuIG9uY2VcIik7XG4gIG1lbWJlciBpbnN0YW5jZW9mIFdlYWtTZXQgPyBtZW1iZXIuYWRkKG9iaikgOiBtZW1iZXIuc2V0KG9iaiwgdmFsdWUpO1xufTtcbnZhciBfX3ByaXZhdGVTZXQgPSAob2JqLCBtZW1iZXIsIHZhbHVlLCBzZXR0ZXIpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJ3cml0ZSB0byBwcml2YXRlIGZpZWxkXCIpO1xuICBzZXR0ZXIgPyBzZXR0ZXIuY2FsbChvYmosIHZhbHVlKSA6IG1lbWJlci5zZXQob2JqLCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgX19wcml2YXRlTWV0aG9kID0gKG9iaiwgbWVtYmVyLCBtZXRob2QpID0+IHtcbiAgX19hY2Nlc3NDaGVjayhvYmosIG1lbWJlciwgXCJhY2Nlc3MgcHJpdmF0ZSBtZXRob2RcIik7XG4gIHJldHVybiBtZXRob2Q7XG59O1xuXG4vLyBzcmMvYmFzZS50c1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBFdmVudEVtaXR0ZXIgfSBmcm9tIFwiZXZlbnRlbWl0dGVyM1wiO1xuaW1wb3J0IHsgZ29lcmxpLCBtYWlubmV0IH0gZnJvbSBcInZpZW0vY2hhaW5zXCI7XG52YXIgQ29ubmVjdG9yID0gY2xhc3MgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgY2hhaW5zID0gW21haW5uZXQsIGdvZXJsaV0sXG4gICAgb3B0aW9uc1xuICB9KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNoYWlucyA9IGNoYWlucztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIGdldEJsb2NrRXhwbG9yZXJVcmxzKGNoYWluKSB7XG4gICAgY29uc3QgeyBkZWZhdWx0OiBibG9ja0V4cGxvcmVyLCAuLi5ibG9ja0V4cGxvcmVycyB9ID0gY2hhaW4uYmxvY2tFeHBsb3JlcnMgPz8ge307XG4gICAgaWYgKGJsb2NrRXhwbG9yZXIpXG4gICAgICByZXR1cm4gW1xuICAgICAgICBibG9ja0V4cGxvcmVyLnVybCxcbiAgICAgICAgLi4uT2JqZWN0LnZhbHVlcyhibG9ja0V4cGxvcmVycykubWFwKCh4KSA9PiB4LnVybClcbiAgICAgIF07XG4gIH1cbiAgaXNDaGFpblVuc3VwcG9ydGVkKGNoYWluSWQpIHtcbiAgICByZXR1cm4gIXRoaXMuY2hhaW5zLnNvbWUoKHgpID0+IHguaWQgPT09IGNoYWluSWQpO1xuICB9XG4gIHNldFN0b3JhZ2Uoc3RvcmFnZSkge1xuICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gIH1cbn07XG5cbmV4cG9ydCB7XG4gIF9fcHJpdmF0ZUdldCxcbiAgX19wcml2YXRlQWRkLFxuICBfX3ByaXZhdGVTZXQsXG4gIF9fcHJpdmF0ZU1ldGhvZCxcbiAgQ29ubmVjdG9yXG59O1xuIl0sIm5hbWVzIjpbIl9fYWNjZXNzQ2hlY2siLCJvYmoiLCJtZW1iZXIiLCJtc2ciLCJoYXMiLCJUeXBlRXJyb3IiLCJfX3ByaXZhdGVHZXQiLCJnZXR0ZXIiLCJjYWxsIiwiZ2V0IiwiX19wcml2YXRlQWRkIiwidmFsdWUiLCJXZWFrU2V0IiwiYWRkIiwic2V0IiwiX19wcml2YXRlU2V0Iiwic2V0dGVyIiwiX19wcml2YXRlTWV0aG9kIiwibWV0aG9kIiwiZGVmYXVsdCIsIkV2ZW50RW1pdHRlciIsImdvZXJsaSIsIm1haW5uZXQiLCJDb25uZWN0b3IiLCJjb25zdHJ1Y3RvciIsImNoYWlucyIsIm9wdGlvbnMiLCJnZXRCbG9ja0V4cGxvcmVyVXJscyIsImNoYWluIiwiYmxvY2tFeHBsb3JlciIsImJsb2NrRXhwbG9yZXJzIiwidXJsIiwiT2JqZWN0IiwidmFsdWVzIiwibWFwIiwieCIsImlzQ2hhaW5VbnN1cHBvcnRlZCIsImNoYWluSWQiLCJzb21lIiwiaWQiLCJzZXRTdG9yYWdlIiwic3RvcmFnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/metaMask.js":
/*!*********************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/metaMask.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MetaMaskConnector: () => (/* binding */ MetaMaskConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_JTELPB65_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-JTELPB65.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-JTELPB65.js\");\n/* harmony import */ var _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-UGBGYVBH.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\");\n/* harmony import */ var _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-W65LBPLT.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n\n\n\n\n// src/metaMask.ts\n\nvar _UNSTABLE_shimOnConnectSelectAccount;\nvar MetaMaskConnector = class extends _chunk_JTELPB65_js__WEBPACK_IMPORTED_MODULE_0__.InjectedConnector {\n    constructor({ chains, options: options_ } = {}){\n        const options = {\n            name: \"MetaMask\",\n            shimDisconnect: true,\n            getProvider () {\n                function getReady(ethereum2) {\n                    const isMetaMask = !!ethereum2?.isMetaMask;\n                    if (!isMetaMask) return;\n                    if (ethereum2.isBraveWallet && !ethereum2._events && !ethereum2._state) return;\n                    if (ethereum2.isApexWallet) return;\n                    if (ethereum2.isAvalanche) return;\n                    if (ethereum2.isBitKeep) return;\n                    if (ethereum2.isBlockWallet) return;\n                    if (ethereum2.isCoin98) return;\n                    if (ethereum2.isFordefi) return;\n                    if (ethereum2.isMathWallet) return;\n                    if (ethereum2.isOkxWallet || ethereum2.isOKExWallet) return;\n                    if (ethereum2.isOneInchIOSWallet || ethereum2.isOneInchAndroidWallet) return;\n                    if (ethereum2.isOpera) return;\n                    if (ethereum2.isPortal) return;\n                    if (ethereum2.isRabby) return;\n                    if (ethereum2.isDefiant) return;\n                    if (ethereum2.isTokenPocket) return;\n                    if (ethereum2.isTokenary) return;\n                    if (ethereum2.isZeal) return;\n                    if (ethereum2.isZerion) return;\n                    return ethereum2;\n                }\n                if (true) return;\n                const ethereum = window.ethereum;\n                if (ethereum?.providers) return ethereum.providers.find(getReady);\n                return getReady(ethereum);\n            },\n            ...options_\n        };\n        super({\n            chains,\n            options\n        });\n        this.id = \"metaMask\";\n        this.shimDisconnectKey = `${this.id}.shimDisconnect`;\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_1__.__privateAdd)(this, _UNSTABLE_shimOnConnectSelectAccount, void 0);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_1__.__privateSet)(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);\n    }\n    async connect({ chainId } = {}) {\n        try {\n            const provider = await this.getProvider();\n            if (!provider) throw new _chunk_UGBGYVBH_js__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n            if (provider.on) {\n                provider.on(\"accountsChanged\", this.onAccountsChanged);\n                provider.on(\"chainChanged\", this.onChainChanged);\n                provider.on(\"disconnect\", this.onDisconnect);\n            }\n            this.emit(\"message\", {\n                type: \"connecting\"\n            });\n            let account = null;\n            if ((0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_1__.__privateGet)(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !this.storage?.getItem(this.shimDisconnectKey)) {\n                account = await this.getAccount().catch(()=>null);\n                const isConnected = !!account;\n                if (isConnected) try {\n                    await provider.request({\n                        method: \"wallet_requestPermissions\",\n                        params: [\n                            {\n                                eth_accounts: {}\n                            }\n                        ]\n                    });\n                    account = await this.getAccount();\n                } catch (error) {\n                    if (this.isUserRejectedRequestError(error)) throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n                    if (error.code === new viem__WEBPACK_IMPORTED_MODULE_3__.ResourceUnavailableRpcError(error).code) throw error;\n                }\n            }\n            if (!account) {\n                const accounts = await provider.request({\n                    method: \"eth_requestAccounts\"\n                });\n                account = (0,viem__WEBPACK_IMPORTED_MODULE_4__.getAddress)(accounts[0]);\n            }\n            let id = await this.getChainId();\n            let unsupported = this.isChainUnsupported(id);\n            if (chainId && id !== chainId) {\n                const chain = await this.switchChain(chainId);\n                id = chain.id;\n                unsupported = this.isChainUnsupported(id);\n            }\n            if (this.options?.shimDisconnect) this.storage?.setItem(this.shimDisconnectKey, true);\n            return {\n                account,\n                chain: {\n                    id,\n                    unsupported\n                },\n                provider\n            };\n        } catch (error) {\n            if (this.isUserRejectedRequestError(error)) throw new viem__WEBPACK_IMPORTED_MODULE_3__.UserRejectedRequestError(error);\n            if (error.code === -32002) throw new viem__WEBPACK_IMPORTED_MODULE_3__.ResourceUnavailableRpcError(error);\n            throw error;\n        }\n    }\n};\n_UNSTABLE_shimOnConnectSelectAccount = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/metaMask.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/walletConnect.js":
/*!**************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/walletConnect.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletConnectConnector: () => (/* binding */ WalletConnectConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-W65LBPLT.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-W65LBPLT.js\");\n/* harmony import */ var _walletconnect_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @walletconnect/utils */ \"(ssr)/./node_modules/@walletconnect/utils/dist/index.es.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/errors/rpc.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createWalletClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/custom.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/encoding/toHex.js\");\n\n// src/walletConnect.ts\n\n\nvar NAMESPACE = \"eip155\";\nvar STORE_KEY = \"store\";\nvar REQUESTED_CHAINS_KEY = \"requestedChains\";\nvar ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nvar _provider, _initProviderPromise, _createProvider, createProvider_fn, _initProvider, initProvider_fn, _isChainsStale, isChainsStale_fn, _setupListeners, setupListeners_fn, _removeListeners, removeListeners_fn, _setRequestedChainsIds, setRequestedChainsIds_fn, _getRequestedChainsIds, getRequestedChainsIds_fn, _getNamespaceChainsIds, getNamespaceChainsIds_fn, _getNamespaceMethods, getNamespaceMethods_fn;\nvar WalletConnectConnector = class extends _chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.Connector {\n    constructor(config){\n        super({\n            ...config,\n            options: {\n                isNewChainsStale: true,\n                ...config.options\n            }\n        });\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _createProvider);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _initProvider);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _isChainsStale);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _setupListeners);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _removeListeners);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _setRequestedChainsIds);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _getRequestedChainsIds);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _getNamespaceChainsIds);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _getNamespaceMethods);\n        this.id = \"walletConnect\";\n        this.name = \"WalletConnect\";\n        this.ready = true;\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _provider, void 0);\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _initProviderPromise, void 0);\n        this.onAccountsChanged = (accounts)=>{\n            if (accounts.length === 0) this.emit(\"disconnect\");\n            else this.emit(\"change\", {\n                account: (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0])\n            });\n        };\n        this.onChainChanged = (chainId)=>{\n            const id = Number(chainId);\n            const unsupported = this.isChainUnsupported(id);\n            this.emit(\"change\", {\n                chain: {\n                    id,\n                    unsupported\n                }\n            });\n        };\n        this.onDisconnect = ()=>{\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, []);\n            this.emit(\"disconnect\");\n        };\n        this.onDisplayUri = (uri)=>{\n            this.emit(\"message\", {\n                type: \"display_uri\",\n                data: uri\n            });\n        };\n        this.onConnect = ()=>{\n            this.emit(\"connect\", {});\n        };\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _createProvider, createProvider_fn).call(this);\n    }\n    async connect({ chainId, pairingTopic } = {}) {\n        try {\n            let targetChainId = chainId;\n            if (!targetChainId) {\n                const store = this.storage?.getItem(STORE_KEY);\n                const lastUsedChainId = store?.state?.data?.chain?.id;\n                if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) targetChainId = lastUsedChainId;\n                else targetChainId = this.chains[0]?.id;\n            }\n            if (!targetChainId) throw new Error(\"No chains found on connector.\");\n            const provider = await this.getProvider();\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setupListeners, setupListeners_fn).call(this);\n            const isChainsStale = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _isChainsStale, isChainsStale_fn).call(this);\n            if (provider.session && isChainsStale) await provider.disconnect();\n            if (!provider.session || isChainsStale) {\n                const optionalChains = this.chains.filter((chain)=>chain.id !== targetChainId).map((optionalChain)=>optionalChain.id);\n                this.emit(\"message\", {\n                    type: \"connecting\"\n                });\n                await provider.connect({\n                    pairingTopic,\n                    chains: [\n                        targetChainId\n                    ],\n                    optionalChains: optionalChains.length ? optionalChains : void 0\n                });\n                (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, this.chains.map(({ id: id2 })=>id2));\n            }\n            const accounts = await provider.enable();\n            const account = (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n            const id = await this.getChainId();\n            const unsupported = this.isChainUnsupported(id);\n            return {\n                account,\n                chain: {\n                    id,\n                    unsupported\n                }\n            };\n        } catch (error) {\n            if (/user rejected/i.test(error?.message)) {\n                throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n            }\n            throw error;\n        }\n    }\n    async disconnect() {\n        const provider = await this.getProvider();\n        try {\n            await provider.disconnect();\n        } catch (error) {\n            if (!/No matching key/i.test(error.message)) throw error;\n        } finally{\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _removeListeners, removeListeners_fn).call(this);\n            (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, []);\n        }\n    }\n    async getAccount() {\n        const { accounts } = await this.getProvider();\n        return (0,viem__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n    }\n    async getChainId() {\n        const { chainId } = await this.getProvider();\n        return chainId;\n    }\n    async getProvider({ chainId } = {}) {\n        if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) await (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _createProvider, createProvider_fn).call(this);\n        if (chainId) await this.switchChain(chainId);\n        return (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider);\n    }\n    async getWalletClient({ chainId } = {}) {\n        const [provider, account] = await Promise.all([\n            this.getProvider({\n                chainId\n            }),\n            this.getAccount()\n        ]);\n        const chain = this.chains.find((x)=>x.id === chainId);\n        if (!provider) throw new Error(\"provider is required.\");\n        return (0,viem__WEBPACK_IMPORTED_MODULE_3__.createWalletClient)({\n            account,\n            chain,\n            transport: (0,viem__WEBPACK_IMPORTED_MODULE_4__.custom)(provider)\n        });\n    }\n    async isAuthorized() {\n        try {\n            const [account, provider] = await Promise.all([\n                this.getAccount(),\n                this.getProvider()\n            ]);\n            const isChainsStale = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _isChainsStale, isChainsStale_fn).call(this);\n            if (!account) return false;\n            if (isChainsStale && provider.session) {\n                try {\n                    await provider.disconnect();\n                } catch  {}\n                return false;\n            }\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    async switchChain(chainId) {\n        const chain = this.chains.find((chain2)=>chain2.id === chainId);\n        if (!chain) throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(new Error(\"chain not found on connector.\"));\n        try {\n            const provider = await this.getProvider();\n            const namespaceChains = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceChainsIds, getNamespaceChainsIds_fn).call(this);\n            const namespaceMethods = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceMethods, getNamespaceMethods_fn).call(this);\n            const isChainApproved = namespaceChains.includes(chainId);\n            if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n                await provider.request({\n                    method: ADD_ETH_CHAIN_METHOD,\n                    params: [\n                        {\n                            chainId: (0,viem__WEBPACK_IMPORTED_MODULE_5__.numberToHex)(chain.id),\n                            blockExplorerUrls: [\n                                chain.blockExplorers?.default?.url\n                            ],\n                            chainName: chain.name,\n                            nativeCurrency: chain.nativeCurrency,\n                            rpcUrls: [\n                                ...chain.rpcUrls.default.http\n                            ]\n                        }\n                    ]\n                });\n                const requestedChains = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getRequestedChainsIds, getRequestedChainsIds_fn).call(this);\n                requestedChains.push(chainId);\n                (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, requestedChains);\n            }\n            await provider.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: (0,viem__WEBPACK_IMPORTED_MODULE_5__.numberToHex)(chainId)\n                    }\n                ]\n            });\n            return chain;\n        } catch (error) {\n            const message = typeof error === \"string\" ? error : error?.message;\n            if (/user rejected request/i.test(message)) {\n                throw new viem__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n            }\n            throw new viem__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(error);\n        }\n    }\n};\n_provider = new WeakMap();\n_initProviderPromise = new WeakMap();\n_createProvider = new WeakSet();\ncreateProvider_fn = async function() {\n    if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _initProviderPromise) && \"undefined\" !== \"undefined\") {}\n    return (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _initProviderPromise);\n};\n_initProvider = new WeakSet();\ninitProvider_fn = async function() {\n    const { EthereumProvider, OPTIONAL_EVENTS, OPTIONAL_METHODS } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@walletconnect\"), __webpack_require__.e(\"vendor-chunks/@stablelib\"), __webpack_require__.e(\"vendor-chunks/pino-pretty\"), __webpack_require__.e(\"vendor-chunks/pino\"), __webpack_require__.e(\"vendor-chunks/fast-redact\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/pino-std-serializers\"), __webpack_require__.e(\"vendor-chunks/thread-stream\"), __webpack_require__.e(\"vendor-chunks/unstorage\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/idb-keyval\"), __webpack_require__.e(\"vendor-chunks/destr\"), __webpack_require__.e(\"vendor-chunks/sonic-boom\"), __webpack_require__.e(\"vendor-chunks/fast-copy\"), __webpack_require__.e(\"vendor-chunks/colorette\"), __webpack_require__.e(\"vendor-chunks/wrappy\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/split2\"), __webpack_require__.e(\"vendor-chunks/secure-json-parse\"), __webpack_require__.e(\"vendor-chunks/safe-stable-stringify\"), __webpack_require__.e(\"vendor-chunks/quick-format-unescaped\"), __webpack_require__.e(\"vendor-chunks/pump\"), __webpack_require__.e(\"vendor-chunks/process\"), __webpack_require__.e(\"vendor-chunks/process-warning\"), __webpack_require__.e(\"vendor-chunks/once\"), __webpack_require__.e(\"vendor-chunks/on-exit-leak-free\"), __webpack_require__.e(\"vendor-chunks/lodash.isequal\"), __webpack_require__.e(\"vendor-chunks/fast-safe-stringify\"), __webpack_require__.e(\"vendor-chunks/event-target-shim\"), __webpack_require__.e(\"vendor-chunks/end-of-stream\"), __webpack_require__.e(\"vendor-chunks/dateformat\"), __webpack_require__.e(\"vendor-chunks/cross-fetch\"), __webpack_require__.e(\"vendor-chunks/atomic-sleep\"), __webpack_require__.e(\"vendor-chunks/abort-controller\")]).then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/ethereum-provider */ \"(ssr)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\"));\n    const [defaultChain, ...optionalChains] = this.chains.map(({ id })=>id);\n    if (defaultChain) {\n        const { projectId, showQrModal = true, qrModalOptions, metadata, relayUrl } = this.options;\n        (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _provider, await EthereumProvider.init({\n            showQrModal,\n            qrModalOptions,\n            projectId,\n            optionalMethods: OPTIONAL_METHODS,\n            optionalEvents: OPTIONAL_EVENTS,\n            chains: [\n                defaultChain\n            ],\n            optionalChains: optionalChains.length ? optionalChains : void 0,\n            rpcMap: Object.fromEntries(this.chains.map((chain)=>[\n                    chain.id,\n                    chain.rpcUrls.default.http[0]\n                ])),\n            metadata,\n            relayUrl\n        }));\n    }\n};\n_isChainsStale = new WeakSet();\nisChainsStale_fn = function() {\n    const namespaceMethods = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceMethods, getNamespaceMethods_fn).call(this);\n    if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) return false;\n    if (!this.options.isNewChainsStale) return false;\n    const requestedChains = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getRequestedChainsIds, getRequestedChainsIds_fn).call(this);\n    const connectorChains = this.chains.map(({ id })=>id);\n    const namespaceChains = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceChainsIds, getNamespaceChainsIds_fn).call(this);\n    if (namespaceChains.length && !namespaceChains.some((id)=>connectorChains.includes(id))) return false;\n    return !connectorChains.every((id)=>requestedChains.includes(id));\n};\n_setupListeners = new WeakSet();\nsetupListeners_fn = function() {\n    if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return;\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _removeListeners, removeListeners_fn).call(this);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"accountsChanged\", this.onAccountsChanged);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"chainChanged\", this.onChainChanged);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"disconnect\", this.onDisconnect);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"session_delete\", this.onDisconnect);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"display_uri\", this.onDisplayUri);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"connect\", this.onConnect);\n};\n_removeListeners = new WeakSet();\nremoveListeners_fn = function() {\n    if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return;\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"accountsChanged\", this.onAccountsChanged);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"chainChanged\", this.onChainChanged);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"disconnect\", this.onDisconnect);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"session_delete\", this.onDisconnect);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"display_uri\", this.onDisplayUri);\n    (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"connect\", this.onConnect);\n};\n_setRequestedChainsIds = new WeakSet();\nsetRequestedChainsIds_fn = function(chains) {\n    this.storage?.setItem(REQUESTED_CHAINS_KEY, chains);\n};\n_getRequestedChainsIds = new WeakSet();\ngetRequestedChainsIds_fn = function() {\n    return this.storage?.getItem(REQUESTED_CHAINS_KEY) ?? [];\n};\n_getNamespaceChainsIds = new WeakSet();\ngetNamespaceChainsIds_fn = function() {\n    if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return [];\n    const namespaces = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).session?.namespaces;\n    if (!namespaces) return [];\n    const normalizedNamespaces = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeNamespaces)(namespaces);\n    const chainIds = normalizedNamespaces[NAMESPACE]?.chains?.map((chain)=>parseInt(chain.split(\":\")[1] || \"\"));\n    return chainIds ?? [];\n};\n_getNamespaceMethods = new WeakSet();\ngetNamespaceMethods_fn = function() {\n    if (!(0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return [];\n    const namespaces = (0,_chunk_W65LBPLT_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).session?.namespaces;\n    if (!namespaces) return [];\n    const normalizedNamespaces = (0,_walletconnect_utils__WEBPACK_IMPORTED_MODULE_6__.normalizeNamespaces)(namespaces);\n    const methods = normalizedNamespaces[NAMESPACE]?.methods;\n    return methods ?? [];\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/walletConnect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js":
/*!*********************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __privateAdd: () => (/* binding */ __privateAdd),\n/* harmony export */   __privateGet: () => (/* binding */ __privateGet),\n/* harmony export */   __privateMethod: () => (/* binding */ __privateMethod),\n/* harmony export */   __privateSet: () => (/* binding */ __privateSet)\n/* harmony export */ });\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar __privateMethod = (obj, member, method)=>{\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9jaHVuay1NUVhCRFRWSy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBSUEsZ0JBQWdCLENBQUNDLEtBQUtDLFFBQVFDO0lBQ2hDLElBQUksQ0FBQ0QsT0FBT0UsR0FBRyxDQUFDSCxNQUNkLE1BQU1JLFVBQVUsWUFBWUY7QUFDaEM7QUFDQSxJQUFJRyxlQUFlLENBQUNMLEtBQUtDLFFBQVFLO0lBQy9CUCxjQUFjQyxLQUFLQyxRQUFRO0lBQzNCLE9BQU9LLFNBQVNBLE9BQU9DLElBQUksQ0FBQ1AsT0FBT0MsT0FBT08sR0FBRyxDQUFDUjtBQUNoRDtBQUNBLElBQUlTLGVBQWUsQ0FBQ1QsS0FBS0MsUUFBUVM7SUFDL0IsSUFBSVQsT0FBT0UsR0FBRyxDQUFDSCxNQUNiLE1BQU1JLFVBQVU7SUFDbEJILGtCQUFrQlUsVUFBVVYsT0FBT1csR0FBRyxDQUFDWixPQUFPQyxPQUFPWSxHQUFHLENBQUNiLEtBQUtVO0FBQ2hFO0FBQ0EsSUFBSUksZUFBZSxDQUFDZCxLQUFLQyxRQUFRUyxPQUFPSztJQUN0Q2hCLGNBQWNDLEtBQUtDLFFBQVE7SUFDM0JjLFNBQVNBLE9BQU9SLElBQUksQ0FBQ1AsS0FBS1UsU0FBU1QsT0FBT1ksR0FBRyxDQUFDYixLQUFLVTtJQUNuRCxPQUFPQTtBQUNUO0FBQ0EsSUFBSU0sa0JBQWtCLENBQUNoQixLQUFLQyxRQUFRZ0I7SUFDbENsQixjQUFjQyxLQUFLQyxRQUFRO0lBQzNCLE9BQU9nQjtBQUNUO0FBT0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb3JlLWZyb250Ly4vbm9kZV9tb2R1bGVzL0B3YWdtaS9jb3JlL2Rpc3QvY2h1bmstTVFYQkRUVksuanM/N2NjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hY2Nlc3NDaGVjayA9IChvYmosIG1lbWJlciwgbXNnKSA9PiB7XG4gIGlmICghbWVtYmVyLmhhcyhvYmopKVxuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbm5vdCBcIiArIG1zZyk7XG59O1xudmFyIF9fcHJpdmF0ZUdldCA9IChvYmosIG1lbWJlciwgZ2V0dGVyKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwicmVhZCBmcm9tIHByaXZhdGUgZmllbGRcIik7XG4gIHJldHVybiBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogbWVtYmVyLmdldChvYmopO1xufTtcbnZhciBfX3ByaXZhdGVBZGQgPSAob2JqLCBtZW1iZXIsIHZhbHVlKSA9PiB7XG4gIGlmIChtZW1iZXIuaGFzKG9iaikpXG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCB0aGUgc2FtZSBwcml2YXRlIG1lbWJlciBtb3JlIHRoYW4gb25jZVwiKTtcbiAgbWVtYmVyIGluc3RhbmNlb2YgV2Vha1NldCA/IG1lbWJlci5hZGQob2JqKSA6IG1lbWJlci5zZXQob2JqLCB2YWx1ZSk7XG59O1xudmFyIF9fcHJpdmF0ZVNldCA9IChvYmosIG1lbWJlciwgdmFsdWUsIHNldHRlcikgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcIndyaXRlIHRvIHByaXZhdGUgZmllbGRcIik7XG4gIHNldHRlciA/IHNldHRlci5jYWxsKG9iaiwgdmFsdWUpIDogbWVtYmVyLnNldChvYmosIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbnZhciBfX3ByaXZhdGVNZXRob2QgPSAob2JqLCBtZW1iZXIsIG1ldGhvZCkgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcImFjY2VzcyBwcml2YXRlIG1ldGhvZFwiKTtcbiAgcmV0dXJuIG1ldGhvZDtcbn07XG5cbmV4cG9ydCB7XG4gIF9fcHJpdmF0ZUdldCxcbiAgX19wcml2YXRlQWRkLFxuICBfX3ByaXZhdGVTZXQsXG4gIF9fcHJpdmF0ZU1ldGhvZFxufTtcbiJdLCJuYW1lcyI6WyJfX2FjY2Vzc0NoZWNrIiwib2JqIiwibWVtYmVyIiwibXNnIiwiaGFzIiwiVHlwZUVycm9yIiwiX19wcml2YXRlR2V0IiwiZ2V0dGVyIiwiY2FsbCIsImdldCIsIl9fcHJpdmF0ZUFkZCIsInZhbHVlIiwiV2Vha1NldCIsImFkZCIsInNldCIsIl9fcHJpdmF0ZVNldCIsInNldHRlciIsIl9fcHJpdmF0ZU1ldGhvZCIsIm1ldGhvZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/core/dist/chunk-TSH6VVF4.js":
/*!*********************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/chunk-TSH6VVF4.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChainMismatchError: () => (/* binding */ ChainMismatchError),\n/* harmony export */   ChainNotConfiguredError: () => (/* binding */ ChainNotConfiguredError),\n/* harmony export */   Config: () => (/* binding */ Config),\n/* harmony export */   ConfigChainsNotFound: () => (/* binding */ ConfigChainsNotFound),\n/* harmony export */   ConnectorAlreadyConnectedError: () => (/* binding */ ConnectorAlreadyConnectedError),\n/* harmony export */   ConnectorNotFoundError: () => (/* reexport safe */ _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError),\n/* harmony export */   SwitchChainNotSupportedError: () => (/* binding */ SwitchChainNotSupportedError),\n/* harmony export */   configureChains: () => (/* binding */ configureChains),\n/* harmony export */   connect: () => (/* binding */ connect),\n/* harmony export */   createConfig: () => (/* binding */ createConfig),\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   deepEqual: () => (/* binding */ deepEqual),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   disconnect: () => (/* binding */ disconnect),\n/* harmony export */   erc20ABI: () => (/* binding */ erc20ABI),\n/* harmony export */   erc4626ABI: () => (/* binding */ erc4626ABI),\n/* harmony export */   erc721ABI: () => (/* binding */ erc721ABI),\n/* harmony export */   fetchBalance: () => (/* binding */ fetchBalance),\n/* harmony export */   fetchBlockNumber: () => (/* binding */ fetchBlockNumber),\n/* harmony export */   fetchEnsAddress: () => (/* binding */ fetchEnsAddress),\n/* harmony export */   fetchEnsAvatar: () => (/* binding */ fetchEnsAvatar),\n/* harmony export */   fetchEnsName: () => (/* binding */ fetchEnsName),\n/* harmony export */   fetchEnsResolver: () => (/* binding */ fetchEnsResolver),\n/* harmony export */   fetchFeeData: () => (/* binding */ fetchFeeData),\n/* harmony export */   fetchToken: () => (/* binding */ fetchToken),\n/* harmony export */   fetchTransaction: () => (/* binding */ fetchTransaction),\n/* harmony export */   getAccount: () => (/* binding */ getAccount),\n/* harmony export */   getCallParameters: () => (/* binding */ getCallParameters),\n/* harmony export */   getConfig: () => (/* binding */ getConfig),\n/* harmony export */   getContract: () => (/* binding */ getContract),\n/* harmony export */   getNetwork: () => (/* binding */ getNetwork),\n/* harmony export */   getPublicClient: () => (/* binding */ getPublicClient),\n/* harmony export */   getSendTransactionParameters: () => (/* binding */ getSendTransactionParameters),\n/* harmony export */   getUnit: () => (/* binding */ getUnit),\n/* harmony export */   getWalletClient: () => (/* binding */ getWalletClient),\n/* harmony export */   getWebSocketPublicClient: () => (/* binding */ getWebSocketPublicClient),\n/* harmony export */   multicall: () => (/* binding */ multicall),\n/* harmony export */   noopStorage: () => (/* binding */ noopStorage),\n/* harmony export */   prepareSendTransaction: () => (/* binding */ prepareSendTransaction),\n/* harmony export */   prepareWriteContract: () => (/* binding */ prepareWriteContract),\n/* harmony export */   readContract: () => (/* binding */ readContract),\n/* harmony export */   readContracts: () => (/* binding */ readContracts),\n/* harmony export */   sendTransaction: () => (/* binding */ sendTransaction),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   signTypedData: () => (/* binding */ signTypedData),\n/* harmony export */   switchNetwork: () => (/* binding */ switchNetwork),\n/* harmony export */   waitForTransaction: () => (/* binding */ waitForTransaction),\n/* harmony export */   watchAccount: () => (/* binding */ watchAccount),\n/* harmony export */   watchBlockNumber: () => (/* binding */ watchBlockNumber),\n/* harmony export */   watchContractEvent: () => (/* binding */ watchContractEvent),\n/* harmony export */   watchMulticall: () => (/* binding */ watchMulticall),\n/* harmony export */   watchNetwork: () => (/* binding */ watchNetwork),\n/* harmony export */   watchPendingTransactions: () => (/* binding */ watchPendingTransactions),\n/* harmony export */   watchPublicClient: () => (/* binding */ watchPublicClient),\n/* harmony export */   watchReadContract: () => (/* binding */ watchReadContract),\n/* harmony export */   watchReadContracts: () => (/* binding */ watchReadContracts),\n/* harmony export */   watchWalletClient: () => (/* binding */ watchWalletClient),\n/* harmony export */   watchWebSocketPublicClient: () => (/* binding */ watchWebSocketPublicClient),\n/* harmony export */   writeContract: () => (/* binding */ writeContract)\n/* harmony export */ });\n/* harmony import */ var _chunk_BVC4KGLQ_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-BVC4KGLQ.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-JTELPB65.js\");\n/* harmony import */ var _chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./chunk-MQXBDTVK.js */ \"(ssr)/./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/createPublicClient.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/fallback.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/http.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/clients/transports/webSocket.js\");\n/* harmony import */ var _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @wagmi/connectors */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-UGBGYVBH.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/constants/unit.js\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zustand/middleware */ \"(ssr)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var zustand_vanilla__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zustand/vanilla */ \"(ssr)/./node_modules/zustand/esm/vanilla.mjs\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/unit/formatUnits.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/errors/contract.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/encoding/fromHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/data/trim.js\");\n/* harmony import */ var zustand_shallow__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! zustand/shallow */ \"(ssr)/./node_modules/zustand/esm/shallow.mjs\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/actions/getContract.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/getAddress.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/unit/parseGwei.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! viem */ \"(ssr)/./node_modules/viem/_esm/utils/address/isAddress.js\");\n\n\n// src/utils/configureChains.ts\n\nfunction configureChains(defaultChains, providers, { batch = {\n    multicall: {\n        wait: 32\n    }\n}, pollingInterval = 4e3, rank, retryCount, retryDelay, stallTimeout } = {}) {\n    if (!defaultChains.length) throw new Error(\"must have at least one chain\");\n    let chains = [];\n    const httpUrls = {};\n    const wsUrls = {};\n    for (const chain of defaultChains){\n        let configExists = false;\n        for (const provider of providers){\n            const apiConfig = provider(chain);\n            if (!apiConfig) continue;\n            configExists = true;\n            if (!chains.some(({ id })=>id === chain.id)) {\n                chains = [\n                    ...chains,\n                    apiConfig.chain\n                ];\n            }\n            httpUrls[chain.id] = [\n                ...httpUrls[chain.id] || [],\n                ...apiConfig.rpcUrls.http\n            ];\n            if (apiConfig.rpcUrls.webSocket) {\n                wsUrls[chain.id] = [\n                    ...wsUrls[chain.id] || [],\n                    ...apiConfig.rpcUrls.webSocket\n                ];\n            }\n        }\n        if (!configExists) {\n            throw new Error([\n                `Could not find valid provider configuration for chain \"${chain.name}\".\n`,\n                \"You may need to add `jsonRpcProvider` to `configureChains` with the chain's RPC URLs.\",\n                \"Read more: https://wagmi.sh/core/providers/jsonRpc\"\n            ].join(\"\\n\"));\n        }\n    }\n    return {\n        chains,\n        publicClient: ({ chainId })=>{\n            const activeChain = chains.find((x)=>x.id === chainId) ?? defaultChains[0];\n            const chainHttpUrls = httpUrls[activeChain.id];\n            if (!chainHttpUrls || !chainHttpUrls[0]) throw new Error(`No providers configured for chain \"${activeChain.id}\"`);\n            const publicClient = (0,viem__WEBPACK_IMPORTED_MODULE_0__.createPublicClient)({\n                batch,\n                chain: activeChain,\n                transport: (0,viem__WEBPACK_IMPORTED_MODULE_1__.fallback)(chainHttpUrls.map((url)=>(0,viem__WEBPACK_IMPORTED_MODULE_2__.http)(url, {\n                        timeout: stallTimeout\n                    })), {\n                    rank,\n                    retryCount,\n                    retryDelay\n                }),\n                pollingInterval\n            });\n            return Object.assign(publicClient, {\n                chains\n            });\n        },\n        webSocketPublicClient: ({ chainId })=>{\n            const activeChain = chains.find((x)=>x.id === chainId) ?? defaultChains[0];\n            const chainWsUrls = wsUrls[activeChain.id];\n            if (!chainWsUrls || !chainWsUrls[0]) return void 0;\n            const publicClient = (0,viem__WEBPACK_IMPORTED_MODULE_0__.createPublicClient)({\n                batch,\n                chain: activeChain,\n                transport: (0,viem__WEBPACK_IMPORTED_MODULE_1__.fallback)(chainWsUrls.map((url)=>(0,viem__WEBPACK_IMPORTED_MODULE_3__.webSocket)(url, {\n                        timeout: stallTimeout\n                    })), {\n                    rank,\n                    retryCount,\n                    retryDelay\n                }),\n                pollingInterval\n            });\n            return Object.assign(publicClient, {\n                chains\n            });\n        }\n    };\n}\n// src/errors.ts\n\nvar ChainMismatchError = class extends Error {\n    constructor({ activeChain, targetChain }){\n        super(`Chain mismatch: Expected \"${targetChain}\", received \"${activeChain}\".`);\n        this.name = \"ChainMismatchError\";\n    }\n};\nvar ChainNotConfiguredError = class extends Error {\n    constructor({ chainId, connectorId }){\n        super(`Chain \"${chainId}\" not configured${connectorId ? ` for connector \"${connectorId}\"` : \"\"}.`);\n        this.name = \"ChainNotConfigured\";\n    }\n};\nvar ConnectorAlreadyConnectedError = class extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"ConnectorAlreadyConnectedError\";\n        this.message = \"Connector already connected\";\n    }\n};\nvar ConfigChainsNotFound = class extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"ConfigChainsNotFound\";\n        this.message = \"No chains were found on the wagmi config. Some functions that require a chain may not work.\";\n    }\n};\nvar SwitchChainNotSupportedError = class extends Error {\n    constructor({ connector }){\n        super(`\"${connector.name}\" does not support programmatic chain switching.`);\n        this.name = \"SwitchChainNotSupportedError\";\n    }\n};\n// src/utils/deepEqual.ts\nfunction deepEqual(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n        if (a.constructor !== b.constructor) return false;\n        let length;\n        let i;\n        if (Array.isArray(a) && Array.isArray(b)) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!deepEqual(a[i], b[i])) return false;\n            return true;\n        }\n        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n        const keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            const key = keys[i];\n            if (key && !deepEqual(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n// src/utils/deserialize.ts\nvar findAndReplace = (cacheRef, { find, replace })=>{\n    if (cacheRef && find(cacheRef)) {\n        return replace(cacheRef);\n    }\n    if (typeof cacheRef !== \"object\") {\n        return cacheRef;\n    }\n    if (Array.isArray(cacheRef)) {\n        return cacheRef.map((item)=>findAndReplace(item, {\n                find,\n                replace\n            }));\n    }\n    if (cacheRef instanceof Object) {\n        return Object.entries(cacheRef).reduce((curr, [key, value])=>({\n                ...curr,\n                [key]: findAndReplace(value, {\n                    find,\n                    replace\n                })\n            }), {});\n    }\n    return cacheRef;\n};\nfunction deserialize(cachedString) {\n    const cache = JSON.parse(cachedString);\n    const deserializedCacheWithBigInts = findAndReplace(cache, {\n        find: (data)=>typeof data === \"string\" && data.startsWith(\"#bigint.\"),\n        replace: (data)=>BigInt(data.replace(\"#bigint.\", \"\"))\n    });\n    return deserializedCacheWithBigInts;\n}\n// src/utils/getParameters.ts\nfunction getCallParameters(args) {\n    return {\n        accessList: args.accessList,\n        account: args.account,\n        blockNumber: args.blockNumber,\n        blockTag: args.blockTag,\n        data: args.data,\n        gas: args.gas,\n        gasPrice: args.gasPrice,\n        maxFeePerGas: args.maxFeePerGas,\n        maxPriorityFeePerGas: args.maxPriorityFeePerGas,\n        nonce: args.nonce,\n        to: args.to,\n        value: args.value\n    };\n}\nfunction getSendTransactionParameters(args) {\n    return {\n        accessList: args.accessList,\n        account: args.account,\n        data: args.data,\n        gas: args.gas,\n        gasPrice: args.gasPrice,\n        maxFeePerGas: args.maxFeePerGas,\n        maxPriorityFeePerGas: args.maxPriorityFeePerGas,\n        nonce: args.nonce,\n        to: args.to,\n        value: args.value\n    };\n}\n// src/utils/getUnit.ts\n\nfunction getUnit(unit) {\n    if (typeof unit === \"number\") return unit;\n    if (unit === \"wei\") return 0;\n    return Math.abs(viem__WEBPACK_IMPORTED_MODULE_4__.weiUnits[unit]);\n}\n// src/utils/serialize.ts\nfunction getReferenceKey(keys, cutoff) {\n    return keys.slice(0, cutoff).join(\".\") || \".\";\n}\nfunction getCutoff(array, value) {\n    const { length } = array;\n    for(let index = 0; index < length; ++index){\n        if (array[index] === value) {\n            return index + 1;\n        }\n    }\n    return 0;\n}\nfunction createReplacer(replacer, circularReplacer) {\n    const hasReplacer = typeof replacer === \"function\";\n    const hasCircularReplacer = typeof circularReplacer === \"function\";\n    const cache = [];\n    const keys = [];\n    return function replace(key, value) {\n        if (typeof value === \"object\") {\n            if (cache.length) {\n                const thisCutoff = getCutoff(cache, this);\n                if (thisCutoff === 0) {\n                    cache[cache.length] = this;\n                } else {\n                    cache.splice(thisCutoff);\n                    keys.splice(thisCutoff);\n                }\n                keys[keys.length] = key;\n                const valueCutoff = getCutoff(cache, value);\n                if (valueCutoff !== 0) {\n                    return hasCircularReplacer ? circularReplacer.call(this, key, value, getReferenceKey(keys, valueCutoff)) : `[ref=${getReferenceKey(keys, valueCutoff)}]`;\n                }\n            } else {\n                cache[0] = value;\n                keys[0] = key;\n            }\n        }\n        return hasReplacer ? replacer.call(this, key, value) : value;\n    };\n}\nfunction serialize(value, replacer, indent, circularReplacer) {\n    return JSON.stringify(value, createReplacer((key, value_)=>{\n        const value2 = typeof value_ === \"bigint\" ? `#bigint.${value_.toString()}` : value_;\n        return replacer?.(key, value2) || value2;\n    }, circularReplacer), indent ?? void 0);\n}\n// src/config.ts\n\n\n// src/storage.ts\nvar noopStorage = {\n    getItem: (_key)=>\"\",\n    setItem: (_key, _value)=>null,\n    removeItem: (_key)=>null\n};\nfunction createStorage({ deserialize: deserialize2 = deserialize, key: prefix = \"wagmi\", serialize: serialize2 = serialize, storage }) {\n    return {\n        ...storage,\n        getItem: (key, defaultState = null)=>{\n            const value = storage.getItem(`${prefix}.${key}`);\n            try {\n                return value ? deserialize2(value) : defaultState;\n            } catch (error) {\n                console.warn(error);\n                return defaultState;\n            }\n        },\n        setItem: (key, value)=>{\n            if (value === null) {\n                storage.removeItem(`${prefix}.${key}`);\n            } else {\n                try {\n                    storage.setItem(`${prefix}.${key}`, serialize2(value));\n                } catch (err) {\n                    console.error(err);\n                }\n            }\n        },\n        removeItem: (key)=>storage.removeItem(`${prefix}.${key}`)\n    };\n}\n// src/config.ts\nvar storeKey = \"store\";\nvar _isAutoConnecting, _lastUsedConnector, _addEffects, addEffects_fn;\nvar Config = class {\n    constructor({ autoConnect = false, connectors = [\n        new _chunk_BVC4KGLQ_js__WEBPACK_IMPORTED_MODULE_5__.InjectedConnector()\n    ], publicClient, storage = createStorage({\n        storage:  false ? 0 : noopStorage\n    }), logger = {\n        warn: console.warn\n    }, webSocketPublicClient }){\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateAdd)(this, _addEffects);\n        this.publicClients = /* @__PURE__ */ new Map();\n        this.webSocketPublicClients = /* @__PURE__ */ new Map();\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateAdd)(this, _isAutoConnecting, void 0);\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateAdd)(this, _lastUsedConnector, void 0);\n        this.args = {\n            autoConnect,\n            connectors,\n            logger,\n            publicClient,\n            storage,\n            webSocketPublicClient\n        };\n        let status = \"disconnected\";\n        let chainId;\n        if (autoConnect) {\n            try {\n                const rawState = storage.getItem(storeKey);\n                const data = rawState?.state?.data;\n                status = data?.account ? \"reconnecting\" : \"connecting\";\n                chainId = data?.chain?.id;\n            } catch (_error) {}\n        }\n        const connectors_ = typeof connectors === \"function\" ? connectors() : connectors;\n        connectors_.forEach((connector)=>connector.setStorage(storage));\n        this.store = (0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_7__.createStore)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_8__.subscribeWithSelector)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_8__.persist)(()=>({\n                connectors: connectors_,\n                publicClient: this.getPublicClient({\n                    chainId\n                }),\n                status,\n                webSocketPublicClient: this.getWebSocketPublicClient({\n                    chainId\n                })\n            }), {\n            name: storeKey,\n            storage,\n            partialize: (state)=>({\n                    ...autoConnect && {\n                        data: {\n                            account: state?.data?.account,\n                            chain: state?.data?.chain\n                        }\n                    },\n                    chains: state?.chains\n                }),\n            version: 2\n        })));\n        this.storage = storage;\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateSet)(this, _lastUsedConnector, storage?.getItem(\"wallet\"));\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateMethod)(this, _addEffects, addEffects_fn).call(this);\n        if (autoConnect && \"undefined\" !== \"undefined\") {}\n    }\n    get chains() {\n        return this.store.getState().chains;\n    }\n    get connectors() {\n        return this.store.getState().connectors;\n    }\n    get connector() {\n        return this.store.getState().connector;\n    }\n    get data() {\n        return this.store.getState().data;\n    }\n    get error() {\n        return this.store.getState().error;\n    }\n    get lastUsedChainId() {\n        return this.data?.chain?.id;\n    }\n    get publicClient() {\n        return this.store.getState().publicClient;\n    }\n    get status() {\n        return this.store.getState().status;\n    }\n    get subscribe() {\n        return this.store.subscribe;\n    }\n    get webSocketPublicClient() {\n        return this.store.getState().webSocketPublicClient;\n    }\n    setState(updater) {\n        const newState = typeof updater === \"function\" ? updater(this.store.getState()) : updater;\n        this.store.setState(newState, true);\n    }\n    clearState() {\n        this.setState((x)=>({\n                ...x,\n                chains: void 0,\n                connector: void 0,\n                data: void 0,\n                error: void 0,\n                status: \"disconnected\"\n            }));\n    }\n    async destroy() {\n        if (this.connector) await this.connector.disconnect?.();\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateSet)(this, _isAutoConnecting, false);\n        this.clearState();\n        this.store.destroy();\n    }\n    async autoConnect() {\n        if ((0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateGet)(this, _isAutoConnecting)) return;\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateSet)(this, _isAutoConnecting, true);\n        this.setState((x)=>({\n                ...x,\n                status: x.data?.account ? \"reconnecting\" : \"connecting\"\n            }));\n        const sorted = (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateGet)(this, _lastUsedConnector) ? [\n            ...this.connectors\n        ].sort((x)=>x.id === (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateGet)(this, _lastUsedConnector) ? -1 : 1) : this.connectors;\n        let connected = false;\n        for (const connector of sorted){\n            if (!connector.ready || !connector.isAuthorized) continue;\n            const isAuthorized = await connector.isAuthorized();\n            if (!isAuthorized) continue;\n            const data = await connector.connect();\n            this.setState((x)=>({\n                    ...x,\n                    connector,\n                    chains: connector?.chains,\n                    data,\n                    status: \"connected\"\n                }));\n            connected = true;\n            break;\n        }\n        if (!connected) this.setState((x)=>({\n                ...x,\n                data: void 0,\n                status: \"disconnected\"\n            }));\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_6__.__privateSet)(this, _isAutoConnecting, false);\n        return this.data;\n    }\n    setConnectors(connectors) {\n        this.args = {\n            ...this.args,\n            connectors\n        };\n        const connectors_ = typeof connectors === \"function\" ? connectors() : connectors;\n        connectors_.forEach((connector)=>connector.setStorage(this.args.storage));\n        this.setState((x)=>({\n                ...x,\n                connectors: connectors_\n            }));\n    }\n    getPublicClient({ chainId } = {}) {\n        let publicClient_ = this.publicClients.get(-1);\n        if (publicClient_ && publicClient_?.chain.id === chainId) return publicClient_;\n        publicClient_ = this.publicClients.get(chainId ?? -1);\n        if (publicClient_) return publicClient_;\n        const { publicClient } = this.args;\n        publicClient_ = typeof publicClient === \"function\" ? publicClient({\n            chainId\n        }) : publicClient;\n        this.publicClients.set(chainId ?? -1, publicClient_);\n        return publicClient_;\n    }\n    setPublicClient(publicClient) {\n        const chainId = this.data?.chain?.id;\n        this.args = {\n            ...this.args,\n            publicClient\n        };\n        this.publicClients.clear();\n        this.setState((x)=>({\n                ...x,\n                publicClient: this.getPublicClient({\n                    chainId\n                })\n            }));\n    }\n    getWebSocketPublicClient({ chainId } = {}) {\n        let webSocketPublicClient_ = this.webSocketPublicClients.get(-1);\n        if (webSocketPublicClient_ && webSocketPublicClient_?.chain.id === chainId) return webSocketPublicClient_;\n        webSocketPublicClient_ = this.webSocketPublicClients.get(chainId ?? -1);\n        if (webSocketPublicClient_) return webSocketPublicClient_;\n        const { webSocketPublicClient } = this.args;\n        webSocketPublicClient_ = typeof webSocketPublicClient === \"function\" ? webSocketPublicClient({\n            chainId\n        }) : webSocketPublicClient;\n        if (webSocketPublicClient_) this.webSocketPublicClients.set(chainId ?? -1, webSocketPublicClient_);\n        return webSocketPublicClient_;\n    }\n    setWebSocketPublicClient(webSocketPublicClient) {\n        const chainId = this.data?.chain?.id;\n        this.args = {\n            ...this.args,\n            webSocketPublicClient\n        };\n        this.webSocketPublicClients.clear();\n        this.setState((x)=>({\n                ...x,\n                webSocketPublicClient: this.getWebSocketPublicClient({\n                    chainId\n                })\n            }));\n    }\n    setLastUsedConnector(lastUsedConnector = null) {\n        this.storage?.setItem(\"wallet\", lastUsedConnector);\n    }\n};\n_isAutoConnecting = new WeakMap();\n_lastUsedConnector = new WeakMap();\n_addEffects = new WeakSet();\naddEffects_fn = function() {\n    const onChange = (data)=>{\n        this.setState((x)=>({\n                ...x,\n                data: {\n                    ...x.data,\n                    ...data\n                }\n            }));\n    };\n    const onDisconnect = ()=>{\n        this.clearState();\n    };\n    const onError = (error)=>{\n        this.setState((x)=>({\n                ...x,\n                error\n            }));\n    };\n    this.store.subscribe(({ connector })=>connector, (connector, prevConnector)=>{\n        prevConnector?.off?.(\"change\", onChange);\n        prevConnector?.off?.(\"disconnect\", onDisconnect);\n        prevConnector?.off?.(\"error\", onError);\n        if (!connector) return;\n        connector.on?.(\"change\", onChange);\n        connector.on?.(\"disconnect\", onDisconnect);\n        connector.on?.(\"error\", onError);\n    });\n    const { publicClient, webSocketPublicClient } = this.args;\n    const subscribePublicClient = typeof publicClient === \"function\";\n    const subscribeWebSocketPublicClient = typeof webSocketPublicClient === \"function\";\n    if (subscribePublicClient || subscribeWebSocketPublicClient) this.store.subscribe(({ data })=>data?.chain?.id, (chainId)=>{\n        this.setState((x)=>({\n                ...x,\n                publicClient: this.getPublicClient({\n                    chainId\n                }),\n                webSocketPublicClient: this.getWebSocketPublicClient({\n                    chainId\n                })\n            }));\n    });\n};\nvar config;\nfunction createConfig(args) {\n    const config_ = new Config(args);\n    config = config_;\n    return config_;\n}\nfunction getConfig() {\n    if (!config) {\n        throw new Error(\"No wagmi config found. Ensure you have set up a config: https://wagmi.sh/react/config\");\n    }\n    return config;\n}\n// src/actions/accounts/connect.ts\nasync function connect({ chainId, connector }) {\n    const config2 = getConfig();\n    const activeConnector = config2.connector;\n    if (activeConnector && connector.id === activeConnector.id) throw new ConnectorAlreadyConnectedError();\n    try {\n        config2.setState((x)=>({\n                ...x,\n                status: \"connecting\"\n            }));\n        const data = await connector.connect({\n            chainId\n        });\n        config2.setLastUsedConnector(connector.id);\n        config2.setState((x)=>({\n                ...x,\n                connector,\n                chains: connector?.chains,\n                data,\n                status: \"connected\"\n            }));\n        config2.storage.setItem(\"connected\", true);\n        return {\n            ...data,\n            connector\n        };\n    } catch (err) {\n        config2.setState((x)=>{\n            return {\n                ...x,\n                status: x.connector ? \"connected\" : \"disconnected\"\n            };\n        });\n        throw err;\n    }\n}\n// src/actions/accounts/disconnect.ts\nasync function disconnect() {\n    const config2 = getConfig();\n    if (config2.connector) await config2.connector.disconnect();\n    config2.clearState();\n    config2.storage.removeItem(\"connected\");\n}\n// src/actions/accounts/fetchBalance.ts\n\n// src/constants/abis.ts\nvar erc20ABI = [\n    {\n        type: \"event\",\n        name: \"Approval\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"Transfer\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"allowance\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"spender\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"approve\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"balanceOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"decimals\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"name\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"symbol\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"totalSupply\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transfer\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transferFrom\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    }\n];\nvar erc20ABI_bytes32 = [\n    {\n        type: \"event\",\n        name: \"Approval\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"Transfer\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"allowance\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"spender\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"approve\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"balanceOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"decimals\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"name\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bytes32\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"symbol\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bytes32\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"totalSupply\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transfer\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transferFrom\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    }\n];\nvar erc721ABI = [\n    {\n        type: \"event\",\n        name: \"Approval\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"ApprovalForAll\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"operator\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"approved\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"Transfer\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"approve\",\n        stateMutability: \"payable\",\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"balanceOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"getApproved\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"isApprovedForAll\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"operator\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"name\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"ownerOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"safeTransferFrom\",\n        stateMutability: \"payable\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"safeTransferFrom\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"id\",\n                type: \"uint256\"\n            },\n            {\n                name: \"data\",\n                type: \"bytes\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"setApprovalForAll\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"operator\",\n                type: \"address\"\n            },\n            {\n                name: \"approved\",\n                type: \"bool\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"symbol\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"tokenByIndex\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"index\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"tokenByIndex\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"index\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"tokenURI\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"totalSupply\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transferFrom\",\n        stateMutability: \"payable\",\n        inputs: [\n            {\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"tokeId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: []\n    }\n];\nvar erc4626ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Approval\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                indexed: false,\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Deposit\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Transfer\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                indexed: false,\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Withdraw\",\n        type: \"event\"\n    },\n    {\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"spender\",\n                type: \"address\"\n            }\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [],\n        name: \"asset\",\n        outputs: [\n            {\n                name: \"assetTokenAddress\",\n                type: \"address\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"convertToAssets\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"convertToShares\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            }\n        ],\n        name: \"deposit\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"caller\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxDeposit\",\n        outputs: [\n            {\n                name: \"maxAssets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"caller\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxMint\",\n        outputs: [\n            {\n                name: \"maxShares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxRedeem\",\n        outputs: [\n            {\n                name: \"maxShares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxWithdraw\",\n        outputs: [\n            {\n                name: \"maxAssets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            }\n        ],\n        name: \"mint\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewDeposit\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewMint\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewRedeem\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewWithdraw\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"redeem\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [],\n        name: \"totalAssets\",\n        outputs: [\n            {\n                name: \"totalManagedAssets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"withdraw\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    }\n];\n// src/actions/contracts/fetchToken.ts\n\nasync function fetchToken({ address, chainId, formatUnits: unit = 18 }) {\n    async function fetchToken_({ abi }) {\n        const erc20Config = {\n            address,\n            abi,\n            chainId\n        };\n        const [decimals, name, symbol, totalSupply] = await readContracts({\n            allowFailure: false,\n            contracts: [\n                {\n                    ...erc20Config,\n                    functionName: \"decimals\"\n                },\n                {\n                    ...erc20Config,\n                    functionName: \"name\"\n                },\n                {\n                    ...erc20Config,\n                    functionName: \"symbol\"\n                },\n                {\n                    ...erc20Config,\n                    functionName: \"totalSupply\"\n                }\n            ]\n        });\n        return {\n            address,\n            decimals,\n            name,\n            symbol,\n            totalSupply: {\n                formatted: (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(totalSupply, getUnit(unit)),\n                value: totalSupply\n            }\n        };\n    }\n    try {\n        return await fetchToken_({\n            abi: erc20ABI\n        });\n    } catch (err) {\n        if (err instanceof viem__WEBPACK_IMPORTED_MODULE_10__.ContractFunctionExecutionError) {\n            const { name, symbol, ...rest } = await fetchToken_({\n                abi: erc20ABI_bytes32\n            });\n            return {\n                name: (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToString)((0,viem__WEBPACK_IMPORTED_MODULE_12__.trim)(name, {\n                    dir: \"right\"\n                })),\n                symbol: (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToString)((0,viem__WEBPACK_IMPORTED_MODULE_12__.trim)(symbol, {\n                    dir: \"right\"\n                })),\n                ...rest\n            };\n        }\n        throw err;\n    }\n}\n// src/actions/viem/getPublicClient.ts\nfunction getPublicClient({ chainId } = {}) {\n    const config2 = getConfig();\n    if (chainId) return config2.getPublicClient({\n        chainId\n    }) || config2.publicClient;\n    return config2.publicClient;\n}\n// src/actions/viem/getWalletClient.ts\nasync function getWalletClient({ chainId } = {}) {\n    const config2 = getConfig();\n    const walletClient = await config2.connector?.getWalletClient?.({\n        chainId\n    }) || null;\n    return walletClient;\n}\n// src/actions/viem/getWebSocketPublicClient.ts\nfunction getWebSocketPublicClient({ chainId } = {}) {\n    const config2 = getConfig();\n    if (chainId) return config2.getWebSocketPublicClient({\n        chainId\n    }) || config2.webSocketPublicClient;\n    return config2.webSocketPublicClient;\n}\n// src/actions/viem/watchPublicClient.ts\nfunction watchPublicClient(args, callback) {\n    const config2 = getConfig();\n    const handleChange = async ()=>callback(getPublicClient(args));\n    const unsubscribe = config2.subscribe(({ publicClient })=>publicClient, handleChange);\n    return unsubscribe;\n}\n// src/actions/viem/watchWalletClient.ts\n\nfunction watchWalletClient({ chainId }, callback) {\n    const config2 = getConfig();\n    const handleChange = async ({ chainId: chainId_ })=>{\n        if (chainId && chainId_ && chainId !== chainId_) return;\n        const walletClient = await getWalletClient({\n            chainId\n        });\n        if (!getConfig().connector) return callback(null);\n        return callback(walletClient);\n    };\n    const unsubscribe = config2.subscribe(({ data, connector })=>({\n            account: data?.account,\n            chainId: data?.chain?.id,\n            connector\n        }), handleChange, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return unsubscribe;\n}\n// src/actions/viem/watchWebSocketPublicClient.ts\nfunction watchWebSocketPublicClient(args, callback) {\n    const config2 = getConfig();\n    const handleChange = async ()=>callback(getWebSocketPublicClient(args));\n    const unsubscribe = config2.subscribe(({ webSocketPublicClient })=>webSocketPublicClient, handleChange);\n    return unsubscribe;\n}\n// src/actions/contracts/prepareWriteContract.ts\nasync function prepareWriteContract({ abi, address, args, chainId, dataSuffix, functionName, walletClient: walletClient_, ...config2 }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const walletClient = walletClient_ ?? await getWalletClient({\n        chainId\n    });\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    if (chainId) assertActiveChain({\n        chainId\n    });\n    const { account, accessList, blockNumber, blockTag, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, value } = getCallParameters(config2);\n    const { result, request } = await publicClient.simulateContract({\n        abi,\n        address,\n        functionName,\n        args,\n        account: account || walletClient.account,\n        accessList,\n        blockNumber,\n        blockTag,\n        dataSuffix,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        value\n    });\n    const minimizedAbi = abi.filter((abiItem)=>\"name\" in abiItem && abiItem.name === functionName);\n    return {\n        mode: \"prepared\",\n        request: {\n            ...request,\n            abi: minimizedAbi,\n            chainId\n        },\n        result\n    };\n}\n// src/actions/contracts/getContract.ts\n\nfunction getContract({ address, abi, chainId, walletClient }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    return (0,viem__WEBPACK_IMPORTED_MODULE_15__.getContract)({\n        address,\n        abi,\n        publicClient,\n        walletClient\n    });\n}\n// src/actions/contracts/multicall.ts\nasync function multicall({ chainId, contracts, blockNumber, blockTag, ...args }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    if (!publicClient.chains) throw new ConfigChainsNotFound();\n    if (chainId && publicClient.chain.id !== chainId) throw new ChainNotConfiguredError({\n        chainId\n    });\n    return publicClient.multicall({\n        allowFailure: args.allowFailure ?? true,\n        blockNumber,\n        blockTag,\n        contracts\n    });\n}\n// src/actions/contracts/readContract.ts\nasync function readContract({ address, account, chainId, abi, args, functionName, blockNumber, blockTag }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    return publicClient.readContract({\n        abi,\n        address,\n        account,\n        functionName,\n        args,\n        blockNumber,\n        blockTag\n    });\n}\n// src/actions/contracts/readContracts.ts\n\nasync function readContracts({ contracts, blockNumber, blockTag, ...args }) {\n    const { allowFailure = true } = args;\n    try {\n        const publicClient = getPublicClient();\n        const contractsByChainId = contracts.reduce((contracts2, contract, index)=>{\n            const chainId = contract.chainId ?? publicClient.chain.id;\n            return {\n                ...contracts2,\n                [chainId]: [\n                    ...contracts2[chainId] || [],\n                    {\n                        contract,\n                        index\n                    }\n                ]\n            };\n        }, {});\n        const promises = ()=>Object.entries(contractsByChainId).map(([chainId, contracts2])=>multicall({\n                    allowFailure,\n                    chainId: parseInt(chainId),\n                    contracts: contracts2.map(({ contract })=>contract),\n                    blockNumber,\n                    blockTag\n                }));\n        const multicallResults = (await Promise.all(promises())).flat();\n        const resultIndexes = Object.values(contractsByChainId).flatMap((contracts2)=>contracts2.map(({ index })=>index));\n        return multicallResults.reduce((results, result, index)=>{\n            if (results) results[resultIndexes[index]] = result;\n            return results;\n        }, []);\n    } catch (err) {\n        if (err instanceof viem__WEBPACK_IMPORTED_MODULE_10__.ContractFunctionExecutionError) throw err;\n        const promises = ()=>contracts.map((contract)=>readContract({\n                    ...contract,\n                    blockNumber,\n                    blockTag\n                }));\n        if (allowFailure) return (await Promise.allSettled(promises())).map((result)=>{\n            if (result.status === \"fulfilled\") return {\n                result: result.value,\n                status: \"success\"\n            };\n            return {\n                error: result.reason,\n                result: void 0,\n                status: \"failure\"\n            };\n        });\n        return await Promise.all(promises());\n    }\n}\n// src/actions/contracts/watchContractEvent.ts\n\nfunction watchContractEvent({ address, abi, chainId, eventName }, callback) {\n    let unwatch;\n    const watchEvent = async ()=>{\n        if (unwatch) unwatch();\n        const publicClient = getWebSocketPublicClient({\n            chainId\n        }) || getPublicClient({\n            chainId\n        });\n        unwatch = publicClient.watchContractEvent({\n            address,\n            abi,\n            eventName,\n            onLogs: callback\n        });\n    };\n    watchEvent();\n    const config2 = getConfig();\n    const unsubscribe = config2.subscribe(({ publicClient, webSocketPublicClient })=>({\n            publicClient,\n            webSocketPublicClient\n        }), watchEvent, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return ()=>{\n        unwatch?.();\n        unsubscribe();\n    };\n}\n// src/actions/network-status/watchBlockNumber.ts\n\nfunction watchBlockNumber(args, callback) {\n    let unwatch;\n    const createListener = (publicClient)=>{\n        if (unwatch) unwatch();\n        unwatch = publicClient.watchBlockNumber({\n            onBlockNumber: callback,\n            emitOnBegin: true,\n            poll: true\n        });\n    };\n    const publicClient_ = getWebSocketPublicClient({\n        chainId: args.chainId\n    }) ?? getPublicClient({\n        chainId: args.chainId\n    });\n    if (args.listen) createListener(publicClient_);\n    const config2 = getConfig();\n    const unsubscribe = config2.subscribe(({ publicClient, webSocketPublicClient })=>({\n            publicClient,\n            webSocketPublicClient\n        }), async ({ publicClient, webSocketPublicClient })=>{\n        const publicClient_2 = webSocketPublicClient ?? publicClient;\n        if (args.listen && !args.chainId && publicClient_2) {\n            createListener(publicClient_2);\n        }\n    }, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/contracts/watchMulticall.ts\nfunction watchMulticall(args, callback) {\n    const config2 = getConfig();\n    const handleChange = async ()=>callback(await multicall(args));\n    const unwatch = args.listenToBlock ? watchBlockNumber({\n        listen: true\n    }, handleChange) : void 0;\n    const unsubscribe = config2.subscribe(({ publicClient })=>publicClient, handleChange);\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/contracts/watchReadContract.ts\nfunction watchReadContract(args, callback) {\n    const config2 = getConfig();\n    const handleChange = async ()=>callback(await readContract(args));\n    const unwatch = args.listenToBlock ? watchBlockNumber({\n        listen: true\n    }, handleChange) : void 0;\n    const unsubscribe = config2.subscribe(({ publicClient })=>publicClient, handleChange);\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/contracts/watchReadContracts.ts\nfunction watchReadContracts(args, callback) {\n    const config2 = getConfig();\n    const handleChange = async ()=>callback(await readContracts(args));\n    const unwatch = args.listenToBlock ? watchBlockNumber({\n        listen: true\n    }, handleChange) : void 0;\n    const unsubscribe = config2.subscribe(({ publicClient })=>publicClient, handleChange);\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/contracts/writeContract.ts\nasync function writeContract(config2) {\n    const walletClient = await getWalletClient({\n        chainId: config2.chainId\n    });\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    if (config2.chainId) assertActiveChain({\n        chainId: config2.chainId\n    });\n    let request;\n    if (config2.mode === \"prepared\") {\n        request = config2.request;\n    } else {\n        const { chainId: _, mode: __, ...args } = config2;\n        const res = await prepareWriteContract(args);\n        request = res.request;\n    }\n    const hash = await walletClient.writeContract({\n        ...request,\n        chain: config2.chainId ? {\n            id: config2.chainId\n        } : null\n    });\n    return {\n        hash\n    };\n}\n// src/actions/accounts/fetchBalance.ts\nasync function fetchBalance({ address, chainId, formatUnits: unit, token }) {\n    const config2 = getConfig();\n    const publicClient = getPublicClient({\n        chainId\n    });\n    if (token) {\n        const fetchContractBalance = async ({ abi })=>{\n            const erc20Config = {\n                abi,\n                address: token,\n                chainId\n            };\n            const [value2, decimals, symbol] = await readContracts({\n                allowFailure: false,\n                contracts: [\n                    {\n                        ...erc20Config,\n                        functionName: \"balanceOf\",\n                        args: [\n                            address\n                        ]\n                    },\n                    {\n                        ...erc20Config,\n                        functionName: \"decimals\"\n                    },\n                    {\n                        ...erc20Config,\n                        functionName: \"symbol\"\n                    }\n                ]\n            });\n            return {\n                decimals,\n                formatted: (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(value2 ?? \"0\", getUnit(unit ?? decimals)),\n                symbol,\n                value: value2\n            };\n        };\n        try {\n            return await fetchContractBalance({\n                abi: erc20ABI\n            });\n        } catch (err) {\n            if (err instanceof viem__WEBPACK_IMPORTED_MODULE_10__.ContractFunctionExecutionError) {\n                const { symbol, ...rest } = await fetchContractBalance({\n                    abi: erc20ABI_bytes32\n                });\n                return {\n                    symbol: (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToString)((0,viem__WEBPACK_IMPORTED_MODULE_12__.trim)(symbol, {\n                        dir: \"right\"\n                    })),\n                    ...rest\n                };\n            }\n            throw err;\n        }\n    }\n    const chains = [\n        ...config2.publicClient.chains || [],\n        ...config2.chains ?? []\n    ];\n    const value = await publicClient.getBalance({\n        address\n    });\n    const chain = chains.find((x)=>x.id === publicClient.chain.id);\n    return {\n        decimals: chain?.nativeCurrency.decimals ?? 18,\n        formatted: (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(value ?? \"0\", getUnit(unit ?? 18)),\n        symbol: chain?.nativeCurrency.symbol ?? \"ETH\",\n        value\n    };\n}\n// src/actions/accounts/getAccount.ts\nfunction getAccount() {\n    const { data, connector, status } = getConfig();\n    switch(status){\n        case \"connected\":\n            return {\n                address: data?.account,\n                connector,\n                isConnected: true,\n                isConnecting: false,\n                isDisconnected: false,\n                isReconnecting: false,\n                status\n            };\n        case \"reconnecting\":\n            return {\n                address: data?.account,\n                connector,\n                isConnected: !!data?.account,\n                isConnecting: false,\n                isDisconnected: false,\n                isReconnecting: true,\n                status\n            };\n        case \"connecting\":\n            return {\n                address: data?.account,\n                connector,\n                isConnected: false,\n                isConnecting: true,\n                isDisconnected: false,\n                isReconnecting: false,\n                status\n            };\n        case \"disconnected\":\n            return {\n                address: void 0,\n                connector: void 0,\n                isConnected: false,\n                isConnecting: false,\n                isDisconnected: true,\n                isReconnecting: false,\n                status\n            };\n    }\n}\n// src/actions/accounts/getNetwork.ts\nfunction getNetwork() {\n    const config2 = getConfig();\n    const chainId = config2.data?.chain?.id;\n    const activeChains = config2.chains ?? [];\n    const activeChain = [\n        ...config2.publicClient?.chains || [],\n        ...activeChains\n    ].find((x)=>x.id === chainId) ?? {\n        id: chainId,\n        name: `Chain ${chainId}`,\n        network: `${chainId}`,\n        nativeCurrency: {\n            name: \"Ether\",\n            decimals: 18,\n            symbol: \"ETH\"\n        },\n        rpcUrls: {\n            default: {\n                http: [\n                    \"\"\n                ]\n            },\n            public: {\n                http: [\n                    \"\"\n                ]\n            }\n        }\n    };\n    return {\n        chain: chainId ? {\n            ...activeChain,\n            ...config2.data?.chain,\n            id: chainId\n        } : void 0,\n        chains: activeChains\n    };\n}\n// src/actions/accounts/signMessage.ts\nasync function signMessage(args) {\n    const walletClient = await getWalletClient();\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    return await walletClient.signMessage({\n        message: args.message\n    });\n}\n// src/actions/accounts/signTypedData.ts\nasync function signTypedData({ domain, message, primaryType, types }) {\n    const walletClient = await getWalletClient();\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    const { chainId } = domain;\n    if (chainId) assertActiveChain({\n        chainId\n    });\n    return walletClient.signTypedData({\n        message,\n        primaryType,\n        types,\n        domain\n    });\n}\n// src/actions/accounts/switchNetwork.ts\nasync function switchNetwork({ chainId }) {\n    const { connector } = getConfig();\n    if (!connector) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    if (!connector.switchChain) throw new SwitchChainNotSupportedError({\n        connector\n    });\n    return connector.switchChain(chainId);\n}\n// src/actions/accounts/watchAccount.ts\n\nfunction watchAccount(callback, { selector = (x)=>x } = {}) {\n    const config2 = getConfig();\n    const handleChange = ()=>callback(getAccount());\n    const unsubscribe = config2.subscribe(({ data, connector, status })=>selector({\n            address: data?.account,\n            connector,\n            status\n        }), handleChange, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return unsubscribe;\n}\n// src/actions/accounts/watchNetwork.ts\n\nfunction watchNetwork(callback, { selector = (x)=>x } = {}) {\n    const config2 = getConfig();\n    const handleChange = ()=>callback(getNetwork());\n    const unsubscribe = config2.subscribe(({ data, chains })=>selector({\n            chainId: data?.chain?.id,\n            chains\n        }), handleChange, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return unsubscribe;\n}\n// src/actions/ens/fetchEnsAddress.ts\n\nasync function fetchEnsAddress({ chainId, name }) {\n    const { normalize } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/viem\"), __webpack_require__.e(\"vendor-chunks/@adraffy\")]).then(__webpack_require__.bind(__webpack_require__, /*! viem/ens */ \"(ssr)/./node_modules/viem/_esm/ens/index.js\"));\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const address = await publicClient.getEnsAddress({\n        name: normalize(name)\n    });\n    try {\n        if (address === \"0x0000000000000000000000000000000000000000\") return null;\n        return address ? (0,viem__WEBPACK_IMPORTED_MODULE_16__.getAddress)(address) : null;\n    } catch (_error) {\n        return null;\n    }\n}\n// src/actions/ens/fetchEnsAvatar.ts\nasync function fetchEnsAvatar({ name, chainId }) {\n    const { normalize } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/viem\"), __webpack_require__.e(\"vendor-chunks/@adraffy\")]).then(__webpack_require__.bind(__webpack_require__, /*! viem/ens */ \"(ssr)/./node_modules/viem/_esm/ens/index.js\"));\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const avatar = await publicClient.getEnsAvatar({\n        name: normalize(name)\n    });\n    return avatar;\n}\n// src/actions/ens/fetchEnsName.ts\n\nasync function fetchEnsName({ address, chainId }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    return publicClient.getEnsName({\n        address: (0,viem__WEBPACK_IMPORTED_MODULE_16__.getAddress)(address)\n    });\n}\n// src/actions/ens/fetchEnsResolver.ts\nasync function fetchEnsResolver({ chainId, name }) {\n    const { normalize } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/viem\"), __webpack_require__.e(\"vendor-chunks/@adraffy\")]).then(__webpack_require__.bind(__webpack_require__, /*! viem/ens */ \"(ssr)/./node_modules/viem/_esm/ens/index.js\"));\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const resolver = await publicClient.getEnsResolver({\n        name: normalize(name)\n    });\n    return resolver;\n}\n// src/actions/network-status/fetchBlockNumber.ts\nasync function fetchBlockNumber({ chainId } = {}) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const blockNumber = await publicClient.getBlockNumber();\n    return blockNumber;\n}\n// src/actions/network-status/fetchFeeData.ts\n\nasync function fetchFeeData({ chainId, formatUnits: units = \"gwei\" } = {}) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const block = await publicClient.getBlock();\n    let gasPrice = null;\n    try {\n        gasPrice = await publicClient.getGasPrice();\n    } catch  {}\n    let lastBaseFeePerGas = null;\n    let maxFeePerGas = null;\n    let maxPriorityFeePerGas = null;\n    if (block?.baseFeePerGas) {\n        lastBaseFeePerGas = block.baseFeePerGas;\n        maxPriorityFeePerGas = (0,viem__WEBPACK_IMPORTED_MODULE_17__.parseGwei)(\"1\");\n        maxFeePerGas = block.baseFeePerGas * 2n + maxPriorityFeePerGas;\n    }\n    const unit = getUnit(units);\n    const formatted = {\n        gasPrice: gasPrice ? (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(gasPrice, unit) : null,\n        maxFeePerGas: maxFeePerGas ? (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(maxFeePerGas, unit) : null,\n        maxPriorityFeePerGas: maxPriorityFeePerGas ? (0,viem__WEBPACK_IMPORTED_MODULE_9__.formatUnits)(maxPriorityFeePerGas, unit) : null\n    };\n    return {\n        lastBaseFeePerGas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        formatted\n    };\n}\n// src/actions/transactions/fetchTransaction.ts\nasync function fetchTransaction({ chainId, hash }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    return publicClient.getTransaction({\n        hash\n    });\n}\n// src/actions/transactions/prepareSendTransaction.ts\n\nasync function prepareSendTransaction({ accessList, account, chainId, data, gas: gas_, gasPrice, maxFeePerGas, maxPriorityFeePerGas, nonce, to: to_, value, walletClient: walletClient_ }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const walletClient = walletClient_ ?? await getWalletClient({\n        chainId\n    });\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    if (chainId) assertActiveChain({\n        chainId\n    });\n    const to = (to_ && !(0,viem__WEBPACK_IMPORTED_MODULE_18__.isAddress)(to_) ? await fetchEnsAddress({\n        name: to_\n    }) : to_) || void 0;\n    if (to && !(0,viem__WEBPACK_IMPORTED_MODULE_18__.isAddress)(to)) throw new Error(\"Invalid address\");\n    const gas = typeof gas_ === \"undefined\" ? await publicClient.estimateGas({\n        accessList,\n        account: walletClient.account,\n        data,\n        gas: gas_ ?? void 0,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value\n    }) : gas_ || void 0;\n    return {\n        accessList,\n        account,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        mode: \"prepared\",\n        nonce,\n        to,\n        value,\n        ...chainId ? {\n            chainId\n        } : {}\n    };\n}\n// src/actions/transactions/sendTransaction.ts\nasync function sendTransaction({ accessList, account, chainId, data, gas, gasPrice, maxFeePerGas, maxPriorityFeePerGas, mode, nonce, to, value }) {\n    const walletClient = await getWalletClient({\n        chainId\n    });\n    if (!walletClient) throw new _wagmi_connectors__WEBPACK_IMPORTED_MODULE_14__.ConnectorNotFoundError();\n    if (chainId) assertActiveChain({\n        chainId\n    });\n    let args;\n    if (mode === \"prepared\") {\n        args = {\n            account,\n            accessList,\n            chain: null,\n            data,\n            gas,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value\n        };\n    } else {\n        args = await prepareSendTransaction({\n            accessList,\n            account,\n            chainId,\n            data,\n            gas: gas || null,\n            gasPrice,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            nonce,\n            to,\n            value\n        });\n    }\n    const hash = await walletClient.sendTransaction({\n        ...args,\n        chain: chainId ? {\n            id: chainId\n        } : null\n    });\n    return {\n        hash\n    };\n}\n// src/actions/transactions/waitForTransaction.ts\n\nasync function waitForTransaction({ chainId, confirmations = 1, hash, onReplaced, timeout = 0 }) {\n    const publicClient = getPublicClient({\n        chainId\n    });\n    const receipt = await publicClient.waitForTransactionReceipt({\n        hash,\n        confirmations,\n        onReplaced,\n        timeout\n    });\n    if (receipt.status === \"reverted\") {\n        const txn = await publicClient.getTransaction({\n            hash: receipt.transactionHash\n        });\n        const code = await publicClient.call({\n            ...txn,\n            gasPrice: txn.type !== \"eip1559\" ? txn.gasPrice : void 0,\n            maxFeePerGas: txn.type === \"eip1559\" ? txn.maxFeePerGas : void 0,\n            maxPriorityFeePerGas: txn.type === \"eip1559\" ? txn.maxPriorityFeePerGas : void 0\n        });\n        const reason = (0,viem__WEBPACK_IMPORTED_MODULE_11__.hexToString)(`0x${code.substring(138)}`);\n        throw new Error(reason);\n    }\n    return receipt;\n}\n// src/actions/transactions/watchPendingTransactions.ts\n\nfunction watchPendingTransactions(args, callback) {\n    let unwatch;\n    const createListener = (publicClient)=>{\n        if (unwatch) unwatch();\n        unwatch = publicClient.watchPendingTransactions({\n            onTransactions: callback,\n            poll: true\n        });\n    };\n    const publicClient_ = getWebSocketPublicClient({\n        chainId: args.chainId\n    }) ?? getPublicClient({\n        chainId: args.chainId\n    });\n    createListener(publicClient_);\n    const config2 = getConfig();\n    const unsubscribe = config2.subscribe(({ publicClient, webSocketPublicClient })=>({\n            publicClient,\n            webSocketPublicClient\n        }), async ({ publicClient, webSocketPublicClient })=>{\n        const publicClient_2 = webSocketPublicClient ?? publicClient;\n        if (!args.chainId && publicClient_2) {\n            createListener(publicClient_2);\n        }\n    }, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_13__.shallow\n    });\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/utils/assertActiveChain.ts\nfunction assertActiveChain({ chainId }) {\n    const { chain: activeChain, chains } = getNetwork();\n    const activeChainId = activeChain?.id;\n    if (activeChainId && chainId !== activeChainId) {\n        throw new ChainMismatchError({\n            activeChain: chains.find((x)=>x.id === activeChainId)?.name ?? `Chain ${activeChainId}`,\n            targetChain: chains.find((x)=>x.id === chainId)?.name ?? `Chain ${chainId}`\n        });\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/core/dist/chunk-TSH6VVF4.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/core/dist/providers/alchemy.js":
/*!************************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/providers/alchemy.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   alchemyProvider: () => (/* binding */ alchemyProvider)\n/* harmony export */ });\n\n// src/providers/alchemy.ts\nfunction alchemyProvider({ apiKey }) {\n    return function(chain) {\n        const baseHttpUrl = chain.rpcUrls.alchemy?.http[0];\n        const baseWsUrl = chain.rpcUrls.alchemy?.webSocket?.[0];\n        if (!baseHttpUrl) return null;\n        return {\n            chain: {\n                ...chain,\n                rpcUrls: {\n                    ...chain.rpcUrls,\n                    default: {\n                        http: [\n                            `${baseHttpUrl}/${apiKey}`\n                        ]\n                    }\n                }\n            },\n            rpcUrls: {\n                http: [\n                    `${baseHttpUrl}/${apiKey}`\n                ],\n                webSocket: [\n                    `${baseWsUrl}/${apiKey}`\n                ]\n            }\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9wcm92aWRlcnMvYWxjaGVteS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQThCO0FBRTlCLDJCQUEyQjtBQUMzQixTQUFTQSxnQkFBZ0IsRUFDdkJDLE1BQU0sRUFDUDtJQUNDLE9BQU8sU0FBU0MsS0FBSztRQUNuQixNQUFNQyxjQUFjRCxNQUFNRSxPQUFPLENBQUNDLE9BQU8sRUFBRUMsSUFBSSxDQUFDLEVBQUU7UUFDbEQsTUFBTUMsWUFBWUwsTUFBTUUsT0FBTyxDQUFDQyxPQUFPLEVBQUVHLFdBQVcsQ0FBQyxFQUFFO1FBQ3ZELElBQUksQ0FBQ0wsYUFDSCxPQUFPO1FBQ1QsT0FBTztZQUNMRCxPQUFPO2dCQUNMLEdBQUdBLEtBQUs7Z0JBQ1JFLFNBQVM7b0JBQ1AsR0FBR0YsTUFBTUUsT0FBTztvQkFDaEJLLFNBQVM7d0JBQUVILE1BQU07NEJBQUMsQ0FBQyxFQUFFSCxZQUFZLENBQUMsRUFBRUYsT0FBTyxDQUFDO3lCQUFDO29CQUFDO2dCQUNoRDtZQUNGO1lBQ0FHLFNBQVM7Z0JBQ1BFLE1BQU07b0JBQUMsQ0FBQyxFQUFFSCxZQUFZLENBQUMsRUFBRUYsT0FBTyxDQUFDO2lCQUFDO2dCQUNsQ08sV0FBVztvQkFBQyxDQUFDLEVBQUVELFVBQVUsQ0FBQyxFQUFFTixPQUFPLENBQUM7aUJBQUM7WUFDdkM7UUFDRjtJQUNGO0FBQ0Y7QUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvcmUtZnJvbnQvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9wcm92aWRlcnMvYWxjaGVteS5qcz9kNDQxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uL2NodW5rLU1RWEJEVFZLLmpzXCI7XG5cbi8vIHNyYy9wcm92aWRlcnMvYWxjaGVteS50c1xuZnVuY3Rpb24gYWxjaGVteVByb3ZpZGVyKHtcbiAgYXBpS2V5XG59KSB7XG4gIHJldHVybiBmdW5jdGlvbihjaGFpbikge1xuICAgIGNvbnN0IGJhc2VIdHRwVXJsID0gY2hhaW4ucnBjVXJscy5hbGNoZW15Py5odHRwWzBdO1xuICAgIGNvbnN0IGJhc2VXc1VybCA9IGNoYWluLnJwY1VybHMuYWxjaGVteT8ud2ViU29ja2V0Py5bMF07XG4gICAgaWYgKCFiYXNlSHR0cFVybClcbiAgICAgIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBjaGFpbjoge1xuICAgICAgICAuLi5jaGFpbixcbiAgICAgICAgcnBjVXJsczoge1xuICAgICAgICAgIC4uLmNoYWluLnJwY1VybHMsXG4gICAgICAgICAgZGVmYXVsdDogeyBodHRwOiBbYCR7YmFzZUh0dHBVcmx9LyR7YXBpS2V5fWBdIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJwY1VybHM6IHtcbiAgICAgICAgaHR0cDogW2Ake2Jhc2VIdHRwVXJsfS8ke2FwaUtleX1gXSxcbiAgICAgICAgd2ViU29ja2V0OiBbYCR7YmFzZVdzVXJsfS8ke2FwaUtleX1gXVxuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5leHBvcnQge1xuICBhbGNoZW15UHJvdmlkZXJcbn07XG4iXSwibmFtZXMiOlsiYWxjaGVteVByb3ZpZGVyIiwiYXBpS2V5IiwiY2hhaW4iLCJiYXNlSHR0cFVybCIsInJwY1VybHMiLCJhbGNoZW15IiwiaHR0cCIsImJhc2VXc1VybCIsIndlYlNvY2tldCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/core/dist/providers/alchemy.js\n");

/***/ })

};
;