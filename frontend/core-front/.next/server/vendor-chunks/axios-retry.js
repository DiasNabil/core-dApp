"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/axios-retry";
exports.ids = ["vendor-chunks/axios-retry"];
exports.modules = {

/***/ "(ssr)/./node_modules/axios-retry/dist/esm/index.js":
/*!****************************************************!*\
  !*** ./node_modules/axios-retry/dist/esm/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_OPTIONS: () => (/* binding */ DEFAULT_OPTIONS),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   exponentialDelay: () => (/* binding */ exponentialDelay),\n/* harmony export */   isIdempotentRequestError: () => (/* binding */ isIdempotentRequestError),\n/* harmony export */   isNetworkError: () => (/* binding */ isNetworkError),\n/* harmony export */   isNetworkOrIdempotentRequestError: () => (/* binding */ isNetworkOrIdempotentRequestError),\n/* harmony export */   isRetryableError: () => (/* binding */ isRetryableError),\n/* harmony export */   isSafeRequestError: () => (/* binding */ isSafeRequestError),\n/* harmony export */   namespace: () => (/* binding */ namespace)\n/* harmony export */ });\n/* harmony import */ var is_retry_allowed__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-retry-allowed */ \"(ssr)/./node_modules/is-retry-allowed/index.js\");\n\nconst namespace = \"axios-retry\";\nfunction isNetworkError(error) {\n    const CODE_EXCLUDE_LIST = [\n        \"ERR_CANCELED\",\n        \"ECONNABORTED\"\n    ];\n    if (error.response) {\n        return false;\n    }\n    if (!error.code) {\n        return false;\n    }\n    // Prevents retrying timed out & cancelled requests\n    if (CODE_EXCLUDE_LIST.includes(error.code)) {\n        return false;\n    }\n    // Prevents retrying unsafe errors\n    return is_retry_allowed__WEBPACK_IMPORTED_MODULE_0__(error);\n}\nconst SAFE_HTTP_METHODS = [\n    \"get\",\n    \"head\",\n    \"options\"\n];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat([\n    \"put\",\n    \"delete\"\n]);\nfunction isRetryableError(error) {\n    return error.code !== \"ECONNABORTED\" && (!error.response || error.response.status >= 500 && error.response.status <= 599);\n}\nfunction isSafeRequestError(error) {\n    if (!error.config?.method) {\n        // Cannot determine if the request can be retried\n        return false;\n    }\n    return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\nfunction isIdempotentRequestError(error) {\n    if (!error.config?.method) {\n        // Cannot determine if the request can be retried\n        return false;\n    }\n    return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\nfunction isNetworkOrIdempotentRequestError(error) {\n    return isNetworkError(error) || isIdempotentRequestError(error);\n}\nfunction noDelay() {\n    return 0;\n}\nfunction exponentialDelay(retryNumber = 0, _error = undefined, delayFactor = 100) {\n    const delay = 2 ** retryNumber * delayFactor;\n    const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n    return delay + randomSum;\n}\nconst DEFAULT_OPTIONS = {\n    retries: 3,\n    retryCondition: isNetworkOrIdempotentRequestError,\n    retryDelay: noDelay,\n    shouldResetTimeout: false,\n    onRetry: ()=>{}\n};\nfunction getRequestOptions(config, defaultOptions) {\n    return {\n        ...DEFAULT_OPTIONS,\n        ...defaultOptions,\n        ...config[namespace]\n    };\n}\nfunction setCurrentState(config, defaultOptions) {\n    const currentState = getRequestOptions(config, defaultOptions || {});\n    currentState.retryCount = currentState.retryCount || 0;\n    currentState.lastRequestTime = currentState.lastRequestTime || Date.now();\n    config[namespace] = currentState;\n    return currentState;\n}\nfunction fixConfig(axiosInstance, config) {\n    // @ts-ignore\n    if (axiosInstance.defaults.agent === config.agent) {\n        // @ts-ignore\n        delete config.agent;\n    }\n    if (axiosInstance.defaults.httpAgent === config.httpAgent) {\n        delete config.httpAgent;\n    }\n    if (axiosInstance.defaults.httpsAgent === config.httpsAgent) {\n        delete config.httpsAgent;\n    }\n}\nasync function shouldRetry(currentState, error) {\n    const { retries, retryCondition } = currentState;\n    const shouldRetryOrPromise = (currentState.retryCount || 0) < retries && retryCondition(error);\n    // This could be a promise\n    if (typeof shouldRetryOrPromise === \"object\") {\n        try {\n            const shouldRetryPromiseResult = await shouldRetryOrPromise;\n            // keep return true unless shouldRetryPromiseResult return false for compatibility\n            return shouldRetryPromiseResult !== false;\n        } catch (_err) {\n            return false;\n        }\n    }\n    return shouldRetryOrPromise;\n}\nconst axiosRetry = (axiosInstance, defaultOptions)=>{\n    const requestInterceptorId = axiosInstance.interceptors.request.use((config)=>{\n        setCurrentState(config, defaultOptions);\n        return config;\n    });\n    const responseInterceptorId = axiosInstance.interceptors.response.use(null, async (error)=>{\n        const { config } = error;\n        // If we have no information to retry the request\n        if (!config) {\n            return Promise.reject(error);\n        }\n        const currentState = setCurrentState(config, defaultOptions);\n        if (await shouldRetry(currentState, error)) {\n            currentState.retryCount += 1;\n            const { retryDelay, shouldResetTimeout, onRetry } = currentState;\n            const delay = retryDelay(currentState.retryCount, error);\n            // Axios fails merging this configuration to the default configuration because it has an issue\n            // with circular structures: https://github.com/mzabriskie/axios/issues/370\n            fixConfig(axiosInstance, config);\n            if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n                const lastRequestDuration = Date.now() - currentState.lastRequestTime;\n                const timeout = config.timeout - lastRequestDuration - delay;\n                if (timeout <= 0) {\n                    return Promise.reject(error);\n                }\n                config.timeout = timeout;\n            }\n            config.transformRequest = [\n                (data)=>data\n            ];\n            await onRetry(currentState.retryCount, error, config);\n            return new Promise((resolve)=>{\n                setTimeout(()=>resolve(axiosInstance(config)), delay);\n            });\n        }\n        return Promise.reject(error);\n    });\n    return {\n        requestInterceptorId,\n        responseInterceptorId\n    };\n};\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axiosRetry);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/axios-retry/dist/esm/index.js\n");

/***/ })

};
;